/*
Navicat MySQL Data Transfer

Source Server         : Hibernate
Source Server Version : 50726
Source Host           : localhost:3306
Source Database       : bbs

Target Server Type    : MYSQL
Target Server Version : 50726
File Encoding         : 65001

Date: 2019-07-11 17:25:48
*/

SET FOREIGN_KEY_CHECKS=0;

-- ----------------------------
-- Table structure for admin
-- ----------------------------
DROP TABLE IF EXISTS `admin`;
CREATE TABLE `admin` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_name` varchar(20) DEFAULT NULL,
  `password` varchar(20) DEFAULT NULL,
  `photo_url` tinytext,
  `email` varchar(30) DEFAULT NULL,
  `type` int(11) DEFAULT NULL,
  `sex` varchar(10) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of admin
-- ----------------------------
INSERT INTO `admin` VALUES ('1', 'admin1', '123', '/static/bbs/upload/headimg/first.jpg', 'admin1@qq.com', '0', '男');
INSERT INTO `admin` VALUES ('2', 'admin2', '123', '/static/bbs/upload/headimg/first.jpg', 'admin2@qq.com', '1', '男');
INSERT INTO `admin` VALUES ('3', 'lmj', 'lmj', '/static/bbs/upload/headimg/first.jpg', 'admin3#163.com', '1', '男');

-- ----------------------------
-- Table structure for best_post
-- ----------------------------
DROP TABLE IF EXISTS `best_post`;
CREATE TABLE `best_post` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `post_id` int(11) DEFAULT NULL,
  `user_id` int(11) DEFAULT NULL,
  `apply_date` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `state` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `post_id` (`post_id`),
  KEY `user_id` (`user_id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of best_post
-- ----------------------------
INSERT INTO `best_post` VALUES ('1', '2', '1', '2019-07-10 09:51:09', '1');
INSERT INTO `best_post` VALUES ('2', '2', '1', '2019-07-10 15:18:28', '1');

-- ----------------------------
-- Table structure for followcard
-- ----------------------------
DROP TABLE IF EXISTS `followcard`;
CREATE TABLE `followcard` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `post_id` int(11) DEFAULT NULL,
  `user_id` int(11) DEFAULT NULL,
  `follow_content` longtext,
  `follow_date` datetime DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `send_id` (`post_id`),
  KEY `user_id` (`user_id`)
) ENGINE=InnoDB AUTO_INCREMENT=130 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of followcard
-- ----------------------------
INSERT INTO `followcard` VALUES ('1', '1', '1', '比如说主题和回复存在一对多关系,怎么建立符合面向对象的实体关系.\r\n比如说主题的属性有:id title content\r\n回复有id content\r\n编码控制 不必再数据库建立关系', '2019-07-10 16:42:09');
INSERT INTO `followcard` VALUES ('2', '1', '1', '\r\n比如说数据库(theme)字段是 id title content\r\n回复表是(id content theme_id)这里的theme_id相当于theme表里的id，只是不存在外键，就是这个意思，java实体怎么整 ', '2019-07-07 13:46:48');
INSERT INTO `followcard` VALUES ('3', '1', '1', 'java 实体就是这个咯！\r\n上面的回复已经写出来了！\r\n配置theme对象就好！然后注解@manytoone就好\r\n一的一方配置集合\r\n多的一个配置对象\r\n但是你说的在用了@onetomany自动生成表的时候不在自动生成外键、这个就不知道怎么弄了！ ', '2019-07-07 13:46:56');
INSERT INTO `followcard` VALUES ('4', '1', '1', '评论来晚了', '2019-07-04 05:51:20');
INSERT INTO `followcard` VALUES ('5', '1', '1', ' 可以后台处理 ', '2019-07-09 17:40:22');
INSERT INTO `followcard` VALUES ('6', '2', '1', ' \r\n最近在看一本书“Oracle SQL高级编程”推荐楼主看一下。。。 ', '2019-07-09 19:53:09');
INSERT INTO `followcard` VALUES ('7', '2', '1', '应该是单表。', '2019-07-09 19:53:19');
INSERT INTO `followcard` VALUES ('8', '2', '1', '现在是查询call_back_crm 表还要查call_back_crm_his call_back_crm_his_201301等最近两个月的分表，如果用单表查询，需要把这些表都查询一边，然后查询 i_user_radius_index 表和i_user_radius_index_his表，这样需要查询6次单表 ', '2019-07-18 16:46:08');
INSERT INTO `followcard` VALUES ('9', '2', '1', '不一定\r\ncall_back_CRM 表每天有几千万的数据量，\r\n这些数量一进来就拿去用还是搁在库里？\r\n如果是一进来就用建议用子查询 ', '2019-07-10 05:15:58');
INSERT INTO `followcard` VALUES ('10', '2', '1', 'call_back_crm表中的每天会有大量的数据，这个连接查询只是要把其中的错误数据查询出，然后放到中间表中，\r\n版主大大 我没有表述清楚。\r\n连接查询是 call_back_crm跟i_user_radius_index表连接然后union all连接\r\ncall_back_crm和i_user_radius_index_his表\r\n。。。\r\n总共连接6次(call_back_crm表 call_back_crm_his call_back_crm_his_YYYYMM )\r\n最后把数据查出来\r\n\r\n我想的单表查询是\r\n查询call_back_crm 表还要查call_back_crm_his call_back_crm_his_YYYYMM等最近两个月的分表，如果用单表查询，需要把这些表都查询一边，查出来so_nbr然后查询 i_user_radius_index 表和i_user_radius_index_his表，\r\n现在想想这会有问题的，查出来so_nbr 然后根据每个so_nbr 去i_user_radius_index表中查数据，程序中这样循环扫表每次只查出来一条这样根本不行，，', '2019-07-10 05:17:15');
INSERT INTO `followcard` VALUES ('11', '3', '1', '楼主数据库真厉害 ，能教教我吗', '2019-07-10 06:12:22');
INSERT INTO `followcard` VALUES ('12', '3', '1', '评论来晚了，膜拜大佬', '2019-07-10 07:25:34');
INSERT INTO `followcard` VALUES ('14', '3', '1', '溜溜溜 ，大佬收下我的膝盖', '2019-07-10 15:20:11');
INSERT INTO `followcard` VALUES ('15', '3', '1', '说实话，不是很全，但是非常基础', '2019-07-10 17:02:30');
INSERT INTO `followcard` VALUES ('16', '3', '1', '学到了学到了，楼主能加个联系方式？', '2019-07-10 15:58:06');
INSERT INTO `followcard` VALUES ('17', '4', '1', '貌似挺难的！哈！ ', '2019-07-10 17:03:21');
INSERT INTO `followcard` VALUES ('18', '4', '1', 'ACCESS的知识体系\r\n很多非IT专业的朋友想学习Access, 对个人来说，能过Access的应用可以对日常工作起很大的帮助。 但对于准备学习，或者已经开始学习Access有朋友来说，如何通过系统的学习来成为一个高水平的Access设计者？下面列出我个人认为的Access的知识体系。 ACCESS 由一个桌面型数据库和其开发环境组成。 由于其高效的搭建模型速度，帮很多人喜欢用它来做模型与用户进行交流以确认设...', '2019-07-10 17:03:24');
INSERT INTO `followcard` VALUES ('19', '4', '1', '非常感谢，我没有接触过数据库，但是因工作需要在数据库中查询到项目中某些东西的状态，所以要学习，我想买书回来自学，但不知道什么书比较适合自己看', '2019-07-10 17:03:26');
INSERT INTO `followcard` VALUES ('20', '4', '1', '关系数据库， 网上找本学校的数据库教材就是，先看基础中的SQL语句，范式部分。\r\nVBA，则找本学校的VB教材。 可以百度 \"VB 谭浩强\"', '2019-07-10 17:03:29');
INSERT INTO `followcard` VALUES ('21', '4', '1', 'QQ群 48866293 / 12035577 / 7440532 / 13666209\r\nACCESS专业论坛\r\nhttp://www.accessbbs.cn/bbs/index.php .\r\nhttp://www.office-cn.net/vvb/ .\r\nhttp://www.accessoft.com/bbs/index.asp .\r\nhttp://www.access-programmers.co.uk/forums .\r\n.\r\nhttp://www.office-cn.net/home/space.php?uid=141646 .', '2019-07-10 17:03:31');
INSERT INTO `followcard` VALUES ('22', '5', '1', '先转成date再计算\r\n\r\nselect to_date(to_char(t2,\'yyyy-mm-dd hh24:mi:ss\'),\'yyyy-mm-dd hh24:mi:ss\')-to_date(to_char(t1,\'yyyy-mm-dd hh24:mi:ss\'),\'yyyy-mm-dd hh24:mi:ss\'))*24 intervalS from table1; ', '2019-07-10 17:03:32');
INSERT INTO `followcard` VALUES ('23', '5', '1', 'inthirties   很猛！\r\n  \r\n我直接 整 了个函数  就拿你的那个SQL  ', '2019-07-10 17:03:35');
INSERT INTO `followcard` VALUES ('24', '5', '1', '掉了一个括号\r\n\r\n(to_date(to_char(t2,\'yyyy-mm-dd hh24:mi:ss\'),\'yyyy-mm-dd hh24:mi:ss\')-to_date(to_char(t1,\'yyyy-mm-dd hh24:mi:ss\'),\'yyyy-mm-dd hh24:mi:ss\'))*24 ', '2019-07-10 17:03:36');
INSERT INTO `followcard` VALUES ('25', '5', '1', '我的心在等待！！！！！！！！ ', '2019-07-10 17:03:37');
INSERT INTO `followcard` VALUES ('27', '5', '1', '你弄俩 date 类型的变量，将 timestamp 类型的值赋给 date 类型，然后就可以想减得到相差的天数，× 24 就是小时数了 ', '2019-07-10 17:03:38');
INSERT INTO `followcard` VALUES ('28', '6', '1', '支持一下了。', '2019-07-10 17:14:59');
INSERT INTO `followcard` VALUES ('29', '6', '2', '我觉得这篇文章很不错，希望有人来支持！', '2019-07-10 17:15:02');
INSERT INTO `followcard` VALUES ('30', '6', '2', 'sql2000的数据是建立好的，要用近似相等的方法，来找出orcle数据库相对应的数据，然后插入\r\n到sql2000的数据库中！关键是如何取表名和字段，和怎么判别对应关系啊？', '2019-07-10 17:15:05');
INSERT INTO `followcard` VALUES ('31', '7', '2', '好像SQL2000的不需要考虑。系统会自建一个相同的表。', '2019-07-10 17:15:08');
INSERT INTO `followcard` VALUES ('32', '7', '2', '所给信息不全、起码的给出 2个数据库是同构还是异构？ ', '2019-07-10 17:15:11');
INSERT INTO `followcard` VALUES ('33', '8', '2', '创建一个 DBLINK  直接抽取', '2019-07-10 17:15:13');
INSERT INTO `followcard` VALUES ('34', '8', '2', '我的都是oracle数据库而且同一个版本11g 弱弱的问一句 什么事同构什么是异构啊？', '2019-07-10 17:15:16');
INSERT INTO `followcard` VALUES ('35', '8', '2', '同步的频率有多高，同步的表有多少，数据量有多大 说清楚啊。。\r\n同步的方案有很多。。。根据实际情况决定用哪一种', '2019-07-10 17:15:18');
INSERT INTO `followcard` VALUES ('36', '9', '2', '都是ORACLE数据库便是同构的、\r\n同构比较同步的话比较简单吧、常见的方案也很多、比如物化视图、dblink、OGG、DG、Streams......', '2019-07-10 17:15:19');
INSERT INTO `followcard` VALUES ('37', '9', '2', '那你发错地方了  这是mysql版  虽说mysql和oracle是一家子', '2019-07-10 17:15:22');
INSERT INTO `followcard` VALUES ('38', '9', '2', '用了@onetomany自动生成表的时候不是有外键了嘛??', '2019-07-10 17:15:23');
INSERT INTO `followcard` VALUES ('39', '10', '2', '比如说数据库(theme)字段是 id title content\r\n回复表是(id content theme_id)这里的theme_id相当于theme表里的id，只是不存在外键，就是这个意思，java实体怎么整', '2019-07-10 17:15:24');
INSERT INTO `followcard` VALUES ('40', '10', '2', 'java 实体就是这个咯！\r\n上面的回复已经写出来了！\r\n配置theme对象就好！然后注解@manytoone就好\r\n一的一方配置集合\r\n多的一个配置对象\r\n但是你说的在用了@onetomany自动生成表的时候不在自动生成外键、这个就不知道怎么弄了！', '2019-07-10 17:15:26');
INSERT INTO `followcard` VALUES ('41', '21', '2', '对齐处理(Alignment)的标准化(包括_Alignas标志符，alignof运算符, aligned_alloc函数以及<stdalign.h>头文件。', '2019-07-10 19:55:59');
INSERT INTO `followcard` VALUES ('42', '21', '2', '_Noreturn 函数标记，类似于 gcc 的 __attribute__((noreturn))。', '2019-07-10 19:56:04');
INSERT INTO `followcard` VALUES ('43', '21', '2', '_Generic 关键字', '2019-07-10 19:56:07');
INSERT INTO `followcard` VALUES ('44', '21', '2', '多线程(Multithreading)支持，包括：\n\n                  _Thread_local存储类型标识符，<threads.h>头文件，里面包含了线程的创建和管理函数。\n\n                 _Atomic类型修饰符和<stdatomic.h>头文件。', '2019-07-10 19:56:10');
INSERT INTO `followcard` VALUES ('45', '21', '2', '6、删除了 gets() 函数，使用一个新的更安全的函数gets_s()替代。\r\n\r\n      7、增加了边界检查函数接口，定义了新的安全的函数，例如 fopen_s()，strcat_s()\r\n\r\n      8、匿名结构体/联合体支持。这个在gcc早已存在，C11将其引入标准。', '2019-07-10 19:56:13');
INSERT INTO `followcard` VALUES ('46', '22', '2', '在语法层面上，C++与Java十分相似，Java语言的设计与C++有着很密切的联系。\r\n但却有着许多的不同，最大的不同，可以说是编译和运行了。', '2019-07-10 19:56:15');
INSERT INTO `followcard` VALUES ('47', '22', '2', '高级语言写出来的代码，最终都会变为机器码，计算机才能识别。\r\n汇编与机器码最接近，C++与Java都会直接或间接编程汇编以后，再运行。', '2019-07-10 19:56:19');
INSERT INTO `followcard` VALUES ('48', '22', '2', 'C++经编译器（Unix下CC命令，Windows下CL命令）把源码直接编译成计算机可以认识的机器码，如exe,dll等文件。', '2019-07-10 19:56:22');
INSERT INTO `followcard` VALUES ('49', '22', '2', 'Java源文件都需要用javac命令将源码编译为class文件，但是这个class文件无法被计算机直接识别，但可以被JVM即Java虚拟机识别。\r\n运行Java程序时，先启动一个虚拟机，虚拟机加载class文件，方可执行。\r\n这样，同样的代码被编译为同样的class文件，也称作字节码，在不同的平台上，运行同样的字节码，这样，Java跨平台的特性就显示出来了！而C++则办不到。', '2019-07-10 19:56:25');
INSERT INTO `followcard` VALUES ('50', '22', '2', '人们的惯常认识是\"C++的运行效率高而Java的开发效率高（相对而言）\"。但在某些场景下Java的性能已经不输C++，有的即使落后但是差距也不大。而现代C++有了更多方便的语法和工具，开发效率也有了提高。', '2019-07-10 19:56:28');
INSERT INTO `followcard` VALUES ('51', '23', '1', '多数编程语言都有预选编译好的类库以支持各种特定的功能，在Java中，类库以包（package）的形式提供，不同版本的Java提供不同的包，以面向特定的应用。\r\nJava2平台包括标准版（J2SE）、企业版（J2EE）和微缩版（J2ME）三个版本：\r\nStandard Edition(标准版) J2SE 包含那些构成Java语言核心的类。', '2019-07-10 19:56:31');
INSERT INTO `followcard` VALUES ('52', '23', '1', 'Enterprise Edition(企业版) J2EE 包含J2SE 中的类，并且还包含用于开发企业级应用的类。 \r\n比如：EJB、servlet、JSP、XML、事务控制 \r\nMicro Edition(微缩版) J2ME 包含J2SE中一部分类，用于消费类电子产品的软件开发。 \r\n比如：呼机、智能卡、手机、PDA、机顶盒', '2019-07-10 19:56:34');
INSERT INTO `followcard` VALUES ('53', '23', '1', 'JavaEE，其实是一套规范，就是用java语言做企业开发（目前看来就是开发一些动态网站，或者对外提供调用服务的网站，或者其他没接触过的。。。）中的一整套规范，比如类怎么封装，网页的请求要用什么方法处理，语言编码一类的处理，拦截器啊什么的定义，请求返回得有什么信息。。。（具体看servlet的接口就知道了）比如：tomcat就是按照这套规范开发的容器软件，还有什么weblogic，JBoss、Resin等等正因为我们开发网站（使用JSP，Servelet。。或者封装了这些的框架：SSH。。。）可以放在tomcat，也可以放在JBoss。。。。，因为都是按照一个规范开发的东西，实际使用的还是JavaSE的那些东西，多出来的就是EE的一些规范类的封装代码。', '2019-07-10 19:56:37');
INSERT INTO `followcard` VALUES ('54', '23', '1', '以Java EE的子集Servlet为例，我们现在用Servlet可以相对轻松的写出一个动态Web站点。而在Java EE出现以前，如果要用Java SE写一个动态Web站点，需要自己造轮子从头开始写起，从与浏览器建立TCP连接，到解析HTTP协议请求，到生成HTTP协议请求……一大堆事情都要自己来做。关键问题是，像建立TCP请求、解析HTTP请求等这种繁琐而又占用时间的事情，每次写网站的都要重复来做，每次做的都是一样的，于是人们就想为什么不把这些每次重复来做模块做成一个个的轮子来用呢？但是又在由谁造轮子的问题上产生了分歧，于是一个叫JCP的组织决定，把程序的接口约定好，大家一起来按照接口造轮子，最后消费者喜欢用谁家的轮子就用谁家的轮子。', '2019-07-10 19:56:40');
INSERT INTO `followcard` VALUES ('55', '23', '1', 'Java ME（Java Platform，Micro Edition）。这个版本以前称为 J2ME。Java ME 为在移动设备和嵌入式设备（比如手机、PDA、电视机顶盒和打印机）上运行的应用程序提供一个健壮且灵活的环境。Java ME 包括灵活的用户界面、健壮的安全模型、许多内置的网络协议以及对可以动态下载的连网和离线应用程序的丰富支持。基于 Java ME 规范的应用程序只需编写一次，就可以用于许多设备，而且可以利用每个设备的本机功能。', '2019-07-10 19:56:43');
INSERT INTO `followcard` VALUES ('56', '24', '1', '1staticlong intArithmetic(int intMax)\r\n 2        {\r\n 3            long elapsedMilliseconds;\r\n 4            int intResult =1;\r\n 5            int i =0;\r\n 6\r\n 7            stopwatch.Start();\r\n 8            while (i < intMax)\r\n 9            {\r\n10                intResult -= i++;\r\n11                intResult += i++;\r\n12                intResult *= i++;\r\n13                intResult /= i++;\r\n14            }\r\n15            elapsedMilliseconds = stopwatch.ElapsedMilliseconds;\r\n16            stopwatch.Reset();\r\n17\r\n18            Console.WriteLine(\"Int arithmetic elapsed time: \" + elapsedMilliseconds +\r\n19                \" ms with max of \" + intMax);\r\n20            Console.WriteLine(\" i: \" + i);\r\n21            Console.WriteLine(\" intResult: \" + intResult);\r\n22            return elapsedMilliseconds;\r\n23        }', '2019-07-10 19:56:46');
INSERT INTO `followcard` VALUES ('57', '24', '1', '在这里各语言性能表现相近。 C#和Java几乎相同，比C，C++效率高上10%。C#的性能可以这样解释：它的浮点数操作效率高，这可以从f2I看出。但这不能理解Java的表现。我们可以认为C#和Java都能较好的优化循环，它涉及函数调用，但这有赖于深入研究。', '2019-07-10 19:56:48');
INSERT INTO `followcard` VALUES ('58', '24', '1', '即使是 C++ 低效的字符串类操作符 = = 都比 C# 的性能快 2.5 倍 (Digital Mars) 到 5 倍（ Intel VC6 STL/CRT ）。 .NET 环境下字符串是内部处理的，这表示字符串存储在全局离散表中，副本可以从内存中消除，等值测试是以一致性检查的方式进行的 ( 只要两个参数都是在内部 ) 。这明显表示内部修复机制的效率严重低下或者一致性检查没有建立 C# 的 ”string-swatching” 机制性。', '2019-04-10 19:56:53');
INSERT INTO `followcard` VALUES ('59', '24', '1', '然而，C#能发挥最佳效率的机制，还是不能与C/C++、D语言相比。更糟糕的是，java的最佳性能都比别的语言的最差性能要可怜，这是相当可悲的。', '2019-07-10 19:56:56');
INSERT INTO `followcard` VALUES ('60', '24', '1', '从语言的表层来看， C# 和 Java 挺简单的，但低效的库降低了速度。我觉得，当相关的库还不如语言本身的时候， C# 的确实有微弱的优势；但反过来，当库逐渐完善，超过语言本身后， C# 明显就不行了。', '2019-04-10 19:56:53');
INSERT INTO `followcard` VALUES ('61', '25', '3', '#!/usr/bin/env python3\r\n# -*- coding:utf-8 -*-\r\n\r\nimport platform\r\nimport sys\r\n\r\nprint(\"\\nplatform.python_version():\")\r\nprint(platform.python_version())\r\n\r\nprint(\"\\nsys.version:\")\r\nprint(sys.version)\r\n\r\nprint(\"\\nsys.version_info:\")\r\nprint(sys.version_info)', '2019-04-10 19:56:53');
INSERT INTO `followcard` VALUES ('62', '25', '3', '随着社会和经济的发展，越来越多的领域需要程序设计，越来越需要功能强大的函数，然而，在C语言中，可用的函数不多，许多函数都需要开发者自己设计，这给编程者带来立刻很大的不便，这种编程方式让Guido感到苦恼，Guido希望有一种语言，这种语言能够像C语言那样，能够全面调用计算机的功能接口，又可以像shell那样，可以轻松的编程，因此，他创造出了Python这种面向对象的语言。', '2019-04-10 19:56:53');
INSERT INTO `followcard` VALUES ('63', '25', '3', '在1989年12月的圣诞节期间，为了打发时间，他决定开发一种新的脚本解释程序，作为ABC语言的继承。 \n相比于之前的计算机编程语言，Python最大的优点就是“优雅”、“明确”、“简单”，Python程序看上去总是简单易懂， \n初学者学Python，不但入门容易，而且将来深入下去，可以编写那些非常非常复杂的程序，而且Python有强大的第三方库模块，需要实现一复杂功能，只需要调用现有的库，可快速实现功能。 \n比如，要求数学中矩阵的相乘和相加问题，这在C语言中可是个大问题，不过在Python中者只不过是几行代码的事情', '2019-04-10 19:56:53');
INSERT INTO `followcard` VALUES ('64', '25', '3', '可以说，Python推动了编程向面向对象的编程的发展，越来越多的软件和网站是用Python开发，比如豆瓣网，知乎，YouTube，和Facebook等软件，现在，python以其优美，清晰，简单的特性在全世界广泛流行，影响和改造着整个世界。', '2019-04-10 19:56:53');
INSERT INTO `followcard` VALUES ('65', '25', '3', '1991年，第一个Python编译器诞生。它是用C语言实现的，并能够调用C语言的库文件。从一出生，Python已经具有了 ：类，函数，异常处理，包含表和词典在内的核心数据类型，以及模块为基础的拓展系统。 Python语法很多来自C，但又受到ABC语言的强烈影响。来自ABC语言的一些规定直到今天还富有争议，比如强制缩进。 但这些语法规定让Python容易读。另一方面，Python聪明的选择服从一些惯例，特别是C语言的惯例，比如回归等号赋值。', '2019-04-10 19:56:53');
INSERT INTO `followcard` VALUES ('66', '26', '3', 'PHP（外文名:PHP: Hypertext Preprocessor，中文名：“超文本预处理器”）是一种通用开源脚本语言。语法吸收了C语言、Java和Perl的特点，利于学习，使用广泛，主要适用于Web开发领域。PHP 独特的语法混合了C、Java、Perl以及PHP自创的语法。它可以比CGI或者Perl更快速地执行动态网页。用PHP做出的动态页面与其他的编程语言相比，PHP是将程序嵌入到HTML（标准通用标记语言下的一个应用）文档中去执行，执行效率比完全生成HTML标记的CGI要高许多；PHP还可以执行编译后代码，编译可以达到加密和优化代码运行，使代码运行更快。　', '2019-04-10 19:56:53');
INSERT INTO `followcard` VALUES ('67', '26', '3', 'PHP文件中，如果使用php语法，必须将PHP语言放到标记当中。PHP支持如下四种标记方式：\r\n①<?php?>这是PHP的官方推荐写法，也就是我们主要采用的写法！这种标记可以插入到HTML文档的任意位置；\r\n>>>注！！！：如果页面中只有PHP语言，推荐省略结束标记?>\r\n原因：空格部分……\r\n②<script language=\"php\"></script>长标记写法：总是可以使用，但是，我们不推荐。\r\n③<??>短标记写法。默认不开启，需要修改php.ini文件中“short_open_tag=On”打开。但是，由于与HTML标签冲突，不推荐使用。\r\n④<% %>ASP风格，默认不开启，需要修改php.ini文件的\"asp-tag = On\"打开，但是和ASP,JSP中的标记冲突，不推荐', '2019-04-10 19:56:53');
INSERT INTO `followcard` VALUES ('68', '26', '3', '【PHP中的指令分隔符 —— ; 】\r\n1、PHP中的\"结构定义语句\"（分支、循环、类、函数等带{}的），不需要使用分号结尾。\r\n2、PHP中的\"功能执行语句\"，（不用{}结尾的），必须使用分号结尾。\r\n3、特例：最后结束标签?>前的最后一条语句，可以省略分号。', '2019-04-10 19:56:53');
INSERT INTO `followcard` VALUES ('69', '26', '3', '【PHP中的变量】\r\n①PHP中的变量，声明与使用，必须使用$开头。\r\n②PHP是一种弱类型语言，变量其实并不需要声明，可以直接给变量赋任何类型的值；\r\n③PHP中可以使用连等同时声明多个变量。而不能使用逗号分隔。\r\neg：$num1=$num2=$num3=5;\r\n④常用变量函数：\r\nunset()：删除并释放变量；\r\nisset()：检测变量是否设置；\r\nempty()：检测变量是否为空（未设置或值为Null都算空）；\r\n⑤变量的命名：只能有字母数字下划线组成，开头不能是数字。而且，PHP中变量区分大小写！！\r\n$name,$Nnme,$NAME都是不同变量；\r\n但是，PHP的内置函数不区分大小写！echo EcHo都是有效的。', '2019-07-02 19:57:33');
INSERT INTO `followcard` VALUES ('70', '26', '2', '【PHP中的变量类型】\r\n①PHP支持8种数据类型：\r\n    4种标量类型：布尔型Boolean 整形integer 浮点型float/double 字符串string\r\n    2种复合类型：数组Array 对象Object\r\n    2种特殊类型：资源Resource 空null。\r\n②整形的范围从-2^32~-2^32-1,超出这个范围，自动转为浮点型。', '2019-07-04 19:57:38');
INSERT INTO `followcard` VALUES ('71', '27', '2', 'JavaScript是目前web开发中不可缺少的脚本语言，js不需要编译即可运行，运行在客户端，需要通过浏览器来解析执行JavaScript代码。', '2019-07-10 19:57:42');
INSERT INTO `followcard` VALUES ('72', '27', '2', 'Javascript语言诞生主要是完成页面的数据验证。因此它运行在客户端，需要运行浏览器来解析执行JavaScript代码。\n \nJS是Netscape网景公司的产品，最早取名为LiveScript;为了吸引更多java程序员。更名为javascript。\n \nJS是弱类型，Java是强类型。\nint 变量名 = 值必须是int\nvar 变量名 = 赋任意类型的值。\n \nvar i = 数值\ni = 字符串\n \n \n特点：\n1. 交互性（它可以做的就是信息的动态交互）\n2. 安全性（不允许直接访问本地硬盘）\n3. 跨平台性（只要是可以解释Js的浏览器都可以执行，和平台无关）', '2019-07-10 19:42:40');
INSERT INTO `followcard` VALUES ('73', '27', '2', '7.1、数组定义方式\nJs 中 数组的定义：\n格式：\nvar 变量名(数组名) = []; // 定义一个空的数组\nvar 变量名(数组名) = [12,”abc”, true]; // 定义数组同时，初元素初值\n \n<script type=\"text/javascript\">\n// var 变量名(数组名) = []; // 定义一个空的数组\nvar arr = [];\n// alert( arr.length ); // 数组长度为\narr[0] = 12;\n// alert(arr[0]); // 12\n// alert(arr.length); // 1\narr[2] = \"abc\";\n// 当我们通过数组下载给数组元素赋初值的时候。js的数组会自动的根据赋值的最大下标做扩容操作。\n// alert(arr.length); //3\n// alert(arr[1]); // undefined\n// 数组的遍历\n// for(var i = 0; i < arr.length; i++) {\n// alert(arr[i]);\n// }\n// var 变量名(数组名) = [12,”abc”, true]; // 定义数组同时，初元素初值\nvar arr2 = [12,\"abc\",true];\n// alert(arr2.length);\narr2[5] = 12;\nalert(arr2.length);\n \n  //二维数组，就是一维数组中，每一个元素都数组\nvar arr3 = [];\nvar arr31 = [311,312,313];\narr3[0] = arr31;\nvar arr32 = [321,322,323];\narr3[1] = arr32;\n \nalert(arr3[0][1]);\n \n</script>', '2019-07-10 19:42:45');
INSERT INTO `followcard` VALUES ('74', '27', '2', 'JavaScript语言的前身叫作Livescript,Netscape公司引进了Sun公司有关Java的程序概念，将自己原有的Livescript 重新进行设计，并改名为JavaScript。\r\n\r\n既然谈到关键字，那么我们就不得不提到ECMA-262标准，ECMAScript语言,TC39。 \r\n弄懂这些，JS的历史就清楚了。 \r\n因为JavaScript是一个大坑，他的关系组成很混乱，说法也很多，如果我有说的不对的或者有不同的想法，欢迎指正。', '2019-07-10 19:42:49');
INSERT INTO `followcard` VALUES ('75', '27', '2', '总的来说，ECMA是ECMAScript的别名，统一标志。 \n关键字在不同版本中是不同的，谈到关键字就得提到ECMA-262标准，和ECMAScript。\n\nECMAScript是一种由Ecma国际（前身为欧洲计算机制造商协会,英文名称是European Computer Manufacturers Association）通过ECMA-262标准化的脚本程序设计语言。\n\n这个标准的创立是因为在发展初期，网景的Javascript，微软的JScript和CEnvi的ScriptEase三足鼎立，均没有设定标准，之后在ECMA的协调下，创立了ECMA-262统一标准。\n\n而我们现在使用的JavaScript等类似语言是ECMAScript的实现，加上了自己的东西。\n\n这种语言在万维网上应用广泛，它往往为JavaScript或JScript，但实际上后两者是ECMA-262标准的实现和扩展。', '2019-07-10 19:42:51');
INSERT INTO `followcard` VALUES ('76', '28', '2', 'Go程序是通过package来组织的\r\n只有package 名称为main的包可以包含main函数\r\n一个可执行程序有且仅有一个main包 ', '2019-07-10 19:42:55');
INSERT INTO `followcard` VALUES ('77', '28', '2', 'package 包名\nimport 要导入的包\n多个包可以用import(包名1 包名2 …)\n如果导入包但是并没有对包进行相关操作就会编译异常\nimport another_name “包名” 为当前导入的包起别名\nconst 用来定义常量\nvar 用来定义全局变量\ntype 定义普通的变量 语法：type variable_name int\ntype 定义结构体类型 type variable_name struct{}\ntype 定义接口类型 type variable_name interface{}\nmain函数 func main(){} ', '2019-07-02 19:43:12');
INSERT INTO `followcard` VALUES ('78', '28', '2', ' Go语言亦叫Golong语言，是由谷歌Goggle公司推出。Go语言的主要开发者有：肯.汤姆逊(Ken Thompson)、罗布.派克(Rob Pike)和罗伯特.格里泽默(Robert Griesemer)。这三个都是大神，稍介绍一下他们的贡献：\r\n    肯.汤姆逊(Ken Thompson)：图灵奖得主，Uinx发明人，B语言作者(C语言前身)，还做飞行员，后来被谷歌挖走。\r\n    罗布.派克(Rob Pike)：Unix团队和Plan 9操作系统计划的成员，与Ken老爷子共事多年，并共创出广泛使用的UTF-8 字元编码。\r\n    罗伯特.格里泽默(Robert Griesemer)：曾协助制作Java的HotSpot编译器，和Chrome浏览器的JavaScript引擎V8。', '2019-07-03 19:43:18');
INSERT INTO `followcard` VALUES ('79', '28', '2', ' 根据Go语言开发者自述，近10多年，从单机时代的C语言到现在互联网时代的Java，都没有令人满意的开发语言，而 C++往往给人的感觉是，花了100%的经历，却只有60%的开发效率，产出比太低，Java和C#的哲学又来源于C++。并且，随着硬件的不断升级，这些语言不能充分的利用硬件及CPU。因此，一门高效、简洁、开源的语言诞生了。', '2019-07-09 19:43:06');
INSERT INTO `followcard` VALUES ('80', '28', '3', 'Go语言保证了既能到达静态编译语言的安全和性能，又达到了动态语言开发速度和易维护性，有人形容Go语言：Go = C + Python , 说明Go语言既有C静态语言程序的运行速度，又能达到Python动态语言的快速开发。', '2019-07-05 19:43:23');
INSERT INTO `followcard` VALUES ('81', '29', '3', 'Objective-C 是Mac和iPhone开发的主要语言，现在把这几天对于Objective-C 语言中的一些特性总结下。\r\n\r\n \r\n\r\nOC是从C发展过来的一种语言，加入了面向对象的特性，听起来和C++颇为相似，所以，下文就把两者的一些区别讲一下，这样就可以很快从C++的基础中知道如何使用OC了。说实话，第一眼看到OC的语法，感觉相当迷茫阿。这都什么东西？没有了括号，好多中括号。。。哈哈', '2019-07-10 19:43:03');
INSERT INTO `followcard` VALUES ('82', '29', '3', 'OC的声明是包含在 @interface ... @end 之间，而不是 Class  {……};\n在：后面的是父类的名称，<>中间的是实现的接口。C++可以实现多重继承，OC不支持，以实现接口的方式来实现近似的关系。一般来讲，多重继承也是不推荐的。多重继承引入的其他的函数可以藉由接口实现，或者叫协议protocols更合适，是类似于虚基类。而多重继承引入的其他变量，OC是没有直接的语法实现的，也许可以通过在类中组合一个成员变量的方式带入其他的变量。', '2019-07-03 19:43:29');
INSERT INTO `followcard` VALUES ('83', '29', '3', 'OC语言,消息传递模型，对象之间互相传递消息。\r\n\r\nC++类别和方法严格清楚，一个方法必定属于一个类别，编译时已经绑定关系，不可能调用一个不存在类里面的方法。\r\n\r\nOC类别和消息（方法）的关系松散，调用方法视为对对象发送消息，所有方法都被视为对消息的回应。所有消息处理直到运行时才会动态绑定，并交由类别自行决定如何处理收到的消息。一个类别不保证一定会回应收到的消息，如果类别收到了一个无法处理的消息，程序只会抛出异常，不会出错或崩溃。\r\n\r\n[car fly];\r\n\r\n发一个fly的信息给car，fly是消息，而car是消息的接收者。car收到消息后会决定如何回应这个消息，若car类别内定义有fly方法就运行方法内之代码，若car内不存在fly方法，则程序依旧可以通过编译，运行期则抛出异常。', '2019-07-05 19:43:35');
INSERT INTO `followcard` VALUES ('84', '29', '3', 'Objective-C定义一个新的方法时，名称内的冒号（:）代表参数传递，不同于C语言以数学函数的括号来传递参数。Objective-C方法使得参数可以夹杂于名称中间，不必全部附缀于方法名称的尾端，可以提高程序可读性（感觉很不习惯( ⊙ o ⊙ )啊！）。', '2019-07-05 19:43:40');
INSERT INTO `followcard` VALUES ('85', '29', '3', '正式协议类似于Java中的\"接口\"，它是一系列方法的列表，任何类都可以声明自身实现了某个协议。在Objective-C 2.0之前，一个类必须实现它声明匹配的协议中的所有方法，否则编译器会报告错误，表明这个类没有实现它声明匹配的协议中的全部方法。Objective-C 2.0版本允许标记协议中某些方法为可选的（Optional），这样编译器就不会强制实现这些可选的方法。', '2019-07-10 19:43:00');
INSERT INTO `followcard` VALUES ('86', '10', '3', 'OpenStack Object Storage（Swift）是OpenStack开源云计算项目的子项目之一。Swift的目的是使用普通硬件来构建冗余的、可扩展的分布式对象存储集群，存储容量可达PB级。\r\n\r\nSwift并不是文件系统或者实时的数据存储系统，它是对象存储，用于永久类型的静态数据的长期存储，这些数据可以检索、调整，必要时进行更新。最适合存储的数据类型的例子是虚拟机镜像、图片存储、邮件存储和存档备份。\r\n\r\nSwift无需采用RAID（磁盘冗余阵列），也没有中心单元或主控结点。Swift通过在软件层面引入一致性哈希技术和数据冗余性，牺牲一定程度的数据一致性来达到高可用性（High Availability，简称HA）和可伸缩性，支持多租户模式、容器和对象读写操作，适合解决互联网的应用场景下非结构化数据存储问题。', '2019-07-07 19:43:46');
INSERT INTO `followcard` VALUES ('87', '10', '3', 'Swift的主要特性如下：\r\n\r\n极高的数据持久性（Durability）。\r\n完全对称的系统架构：“对称”意味着Swift中各节点可以完全对等，能极大地降低系统维护成本。\r\n无限的可扩展性：一是数据存储容量无限可扩展；二是Swift性能（如QPS、吞吐量等）可线性提升。\r\n无单点故障：Swift的元数据存储是完全均匀随机分布的，并且与对象文件存储一样，元数据也会存储多份。整个Swift集群中，也没有一个角色是单点的，并且在架构和设计上保证无单点业务是有效的。\r\n简单、可依赖。\r\nSwift的主要特性如下：\r\n\r\n极高的数据持久性（Durability）。\r\n完全对称的系统架构：“对称”意味着Swift中各节点可以完全对等，能极大地降低系统维护成本。\r\n无限的可扩展性：一是数据存储容量无限可扩展；二是Swift性能（如QPS、吞吐量等）可线性提升。\r\n无单点故障：Swift的元数据存储是完全均匀随机分布的，并且与对象文件存储一样，元数据也会存储多份。整个Swift集群中，也没有一个角色是单点的，并且在架构和设计上保证无单点业务是有效的。\r\n简单、可依赖。\r\nSwift的主要特性如下：\r\n\r\n极高的数据持久性（Durability）。\r\n完全对称的系统架构：“对称”意味着Swift中各节点可以完全对等，能极大地降低系统维护成本。\r\n无限的可扩展性：一是数据存储容量无限可扩展；二是Swift性能（如QPS、吞吐量等）可线性提升。\r\n无单点故障：Swift的元数据存储是完全均匀随机分布的，并且与对象文件存储一样，元数据也会存储多份。整个Swift集群中，也没有一个角色是单点的，并且在架构和设计上保证无单点业务是有效的。\r\n简单、可依赖。', '2019-07-04 19:43:53');
INSERT INTO `followcard` VALUES ('88', '10', '3', 'Swift和Hadoop分布式文件系统（HDFS）都有着相似的目的：实现冗余、快速、联网的存储，它们的技术差异如下：\r\n\r\n在Swift中，元数据呈分布式，跨集群复制。而在HDFS使用了中央系统来维护文件元数据（Namenode，名称节点），这对HDFS来说无异于单一故障点，因而扩展到规模非常大的环境显得更困难。\r\nSwift在设计时考虑到了多租户架构，而HDFS没有多租户架构这个概念。\r\n在Swift中，文件可以写入多次；在并发操作环境下，以最近一次操作为准。而在HDFS中，文件写入一次，而且每次只能有一个文件写入。\r\nSwift用Python来编写，而HDFS用Java来编写。\r\nSwift被设计成了一种比较通用的存储解决方案，能够可靠地存储数量非常多的大小不一的文件；而HDFS被设计成可以存储数量中等的大文件（HDFS针对更庞大的文件作了优化），以支持数据处理。', '2019-07-10 19:42:58');
INSERT INTO `followcard` VALUES ('89', '10', '3', '在分布式对象存储中，一个关键问题是数据该如何存放。Swift是基于一致性哈希技术，通过计算可将对象均匀分布到虚拟空间的虚拟节点上，在增加或删除节点时可大大减少需移动的数据量；虚拟空间大小通常采用2的n次幂，便于进行高效的移位操作；然后通过独特的数据结构 Ring（环）再将虚拟节点映射到实际的物理存储设备上，完成寻址过程。', '2019-07-09 19:43:57');
INSERT INTO `followcard` VALUES ('90', '10', '3', 'Swift使用该算法的主要目的是在改变集群的node数量时（增加/删除服务器），能够尽可能少地改变已存在key和node的映射关系，以满足单调性。\r\n\r\n考虑到哈希算法在node较少的情况下，改变node数会带来巨大的数据迁移。为了解决这种情况，一致性哈希引入了“虚拟节点”（vnode，也称为partition）的概念： “虚拟节点”是实际节点在环形空间的复制品，一个实际节点对应了若干个“虚拟节点”，“虚拟节点”在哈希空间中以哈希值排列。', '2019-07-08 19:44:02');
INSERT INTO `followcard` VALUES ('91', '11', '2', '<div class=\"post_body post_body_min_h\">\r\n							这理论知识，不懂。。。\r\n\r\n							<div>\r\n								\r\n							</div>\r\n					</div>', '2019-07-10 17:19:07');
INSERT INTO `followcard` VALUES ('92', '12', '2', '<div class=\"post_body post_body_min_h\">\r\n							我的理解是这样的，首先main实际上就是一个进程，而在fork时，产生的子进程与父进程共享空间和堆栈段，父子进程都等待fork返回，在创建子进程的过程中，父进程先执行结束执行else，随后子进程也执行结束返回值是0执行if...刚学linux，抛砖引玉了\r\n\r\n							<div>\r\n								\r\n							</div>\r\n					</div>', '2019-07-10 17:22:02');
INSERT INTO `followcard` VALUES ('93', '12', '2', '<div class=\"post_body post_body_min_h\">\r\n							这个确实不好理解<br>\r\n<br>\r\n初学只需要记住，从fork返回开始，就根据返回值当作两个程序来对待<br>\r\n<br>\r\n至于fork返回之后，是父进程先执行，还是子进程先执行，这个不一定的\r\n\r\n							<div>\r\n								\r\n							</div>\r\n					</div>', '2019-07-10 17:22:23');
INSERT INTO `followcard` VALUES ('94', '12', '2', '<div class=\"post_body post_body_min_h\">\r\n							fork是个系统调用，进入内核，内核就会生成子进程，这个时候不是什么fork执行一次，返回两次，而是父子进程各返回一次，只是内核把父子进程从fork返回的返回值设置得不同而已。\r\n\r\n							<div>\r\n								\r\n							</div>\r\n					</div>', '2019-07-10 17:22:49');
INSERT INTO `followcard` VALUES ('95', '12', '2', '<div class=\"post_body post_body_min_h\">\r\n							也只能先记住了，以后慢慢理解，我其实就想知道fork函数具体如何复制进程信息的，子进程除了进程号之外，还有什么地方也和父进程是不一样的，子进程也调用了fork函数，为什么不会再创建自己子进程，而如此循环往复。。。<fieldset><legend class=\"font_bold\">引用&nbsp;2&nbsp;楼&nbsp;arnold9009&nbsp;的回复:</legend><blockquote>这个确实不好理解<br>\r\n<br>\r\n初学只需要记住，从fork返回开始，就根据返回值当作两个程序来对待<br>\r\n<br>\r\n至于fork返回之后，是父进程先执行，还是子进程先执行，这个不一定的</blockquote></fieldset>\r\n\r\n							<div>\r\n								\r\n							</div>\r\n					</div>', '2019-07-10 17:23:48');
INSERT INTO `followcard` VALUES ('96', '13', '2', '<div class=\"post_body post_body_min_h\">\r\n							这头像厉害额\r\n\r\n							<div>\r\n								\r\n							</div>\r\n					</div>', '2019-07-10 19:04:38');
INSERT INTO `followcard` VALUES ('97', '14', '2', '<div class=\"post_body post_body_min_h\">\r\n							顶一下，俺也一直想知道···，希望能得到详细的答案。\r\n\r\n							<div>\r\n								\r\n							</div>\r\n					</div>', '2019-07-10 19:06:31');
INSERT INTO `followcard` VALUES ('98', '14', '2', '<div class=\"post_body post_body_min_h\">\r\n							估计再怎么顶也没人来了...<br>\r\n可能是我没说清楚那个我的问题<br>\r\n<br>\r\n我的意思是...<br>\r\n比如现在我们可以用VC++来开发Win32应用程序,那么操作系统用什么来写呢?\r\n\r\n							<div>\r\n								\r\n							</div>\r\n					</div>', '2019-07-10 19:06:54');
INSERT INTO `followcard` VALUES ('99', '14', '2', '<div class=\"post_body post_body_min_h\">\r\n							呵呵,操作系统是01写出来的,<br>\r\n这是个复杂的课题,等高手来解答.\r\n\r\n							<div>\r\n								\r\n							</div>\r\n					</div>', '2019-07-10 19:07:16');
INSERT INTO `followcard` VALUES ('100', '14', null, '<div class=\"post_body post_body_min_h\">\r\n							最早应该是手工编译的吧:<br>\r\n比如先在纸上写出下面的代码:<br>\r\nNOP<br>\r\nMOV&nbsp;AL,2<br>\r\nINT&nbsp;10H<br>\r\nJMP&nbsp;1000:0100<br>\r\n然后根据机器指令助记符对应的机器码,手工转换成机器指令就是:&nbsp;90&nbsp;B0&nbsp;02&nbsp;CD&nbsp;10&nbsp;EA&nbsp;00&nbsp;01&nbsp;00&nbsp;10&nbsp;<br>\r\n这个时候的机器指令助记符大概还不能称之为汇编,第一个真正意义上的汇编编译器大概是通过将大量的助记符写成的程序段用手工方法转换成机器码,然后才是通过这个程序去自动编译由助记符写成的代码程序,这样才有了一个汇编的雏形吧,个人理解,并不保证正确性^_^\r\n\r\n							<div>\r\n								\r\n							</div>\r\n					</div>', '2019-07-10 19:07:47');
INSERT INTO `followcard` VALUES ('101', '15', '2', '<div class=\"post_body post_body_min_h\">\r\n							先别说操作系统，做一个稳定好用的数据库来看看，不要抄袭MySQL\r\n\r\n							<div>\r\n								\r\n							</div>\r\n					</div>', '2019-07-10 19:09:27');
INSERT INTO `followcard` VALUES ('102', '15', '2', '<div class=\"post_body post_body_min_h\">\r\n							举一个反例，<br>\r\n&nbsp;&nbsp;印度的软件产业也很发达，但他们也没有要开发自己的操作系统呀。<br>\r\n泼一点冷水，<br>\r\n&nbsp;&nbsp;看起来像是典型的枪手文章，煽情而务虚，尤其是第一段，真是……。<br>\r\n……炒作？还是省省吧，东西做好一点再说。\r\n\r\n							<div>\r\n								\r\n							</div>\r\n					</div>', '2019-07-10 19:09:48');
INSERT INTO `followcard` VALUES ('103', '15', '2', '<div class=\"post_body post_body_min_h\">\r\n							建议那些鼓吹自主版权linux的人，仔细研读一下GPL,至少通读一遍吧!<br>\r\n有空的话，再翻一翻《国富论》学习一下什么叫贸易及其好处。\r\n\r\n							<div>\r\n								\r\n							</div>\r\n					</div>', '2019-07-10 19:10:16');
INSERT INTO `followcard` VALUES ('104', '15', '2', '<div class=\"post_body post_body_min_h\">\r\n							我们搞软件的，分为从业人员和研究人员，前者的任务是功能和性能，帮客户实现价值就行了。汉化的linux不是自主版权，好的不是扶持起来的。安全？？每个国家都一样，只是手段不一样。安心搞工作吧，有些事不是技术人员的事，很难明白。\r\n\r\n							<div>\r\n								\r\n							</div>\r\n					</div>', '2019-07-10 19:10:39');
INSERT INTO `followcard` VALUES ('105', '15', '2', '<div class=\"post_body post_body_min_h\">\r\n							此文章既不煽情也不务虚，我觉得更是提醒了我们，受限于人终究不能有更大的突破，开发自己的操作系统并商业花是势在必行的，这不仅关系到国防的问题，而且乃至到整个国家的经济。我相信，只要有经费，别人行，中国人也行！（“两弹一星”的精神应该再次激起）\r\n\r\n							<div>\r\n								\r\n							</div>\r\n					</div>', '2019-07-10 19:11:01');
INSERT INTO `followcard` VALUES ('106', '16', '2', '<div class=\"post_body post_body_min_h\">\r\n							兄弟，可以发我一份吗？谢谢！<br>\r\n我的qq号码是:717046727@qq.com\r\n\r\n							<div>\r\n								\r\n							</div>\r\n					</div>', '2019-07-10 19:15:22');
INSERT INTO `followcard` VALUES ('107', '16', '2', '<div class=\"post_body post_body_min_h\">\r\n							初看一下目录，涵盖内容从基础到进阶，适合各个阶段学习人士，相当不错，那就麻烦楼主发一份邮件了，jbcjay@hotmail.com，在此谢过！\r\n\r\n							<div>\r\n								\r\n							</div>\r\n					</div>', '2019-07-10 19:15:41');
INSERT INTO `followcard` VALUES ('108', '16', '2', '<div class=\"post_body post_body_min_h\">\r\n							现在正在学习中，急需这样的资料，烦请楼主发我一份吧，谢谢。我的邮箱：&nbsp;295770216@qq.com\r\n\r\n							<div>\r\n								\r\n							</div>\r\n					</div>', '2019-07-10 19:16:04');
INSERT INTO `followcard` VALUES ('109', '16', '2', '<div class=\"post_body post_body_min_h\">\r\n							楼主，大好人，&nbsp;虽然来晚了，但是可否给我发一份呢249215114@qq.com，我自学，多谢了，祝你事业蒸蒸日上！\r\n\r\n							<div>\r\n								\r\n							</div>\r\n					</div>', '2019-07-10 19:16:33');
INSERT INTO `followcard` VALUES ('110', '16', '2', '<div class=\"post_body post_body_min_h\">\r\n							感谢分享&nbsp;<br>\r\n<br>\r\n35989101@qq.com\r\n\r\n							<div>\r\n								\r\n							</div>\r\n					</div>', '2019-07-10 19:17:03');
INSERT INTO `followcard` VALUES ('111', '17', '2', '<div class=\"post_body post_body_min_h\">\r\n							两个核心的DDR3的地址有冲突吗？\r\n\r\n							<div>\r\n								\r\n							</div>\r\n					</div>', '2019-07-10 19:32:27');
INSERT INTO `followcard` VALUES ('112', '18', '2', '<div class=\"post_body post_body_min_h\">\r\n							嵌入式的OS主要就是对任务的控制<br>\r\n而每个任务就是loop死循环<br>\r\n通过中断（定时的和软件的）来进行不同任务的调度<br>\r\n而每个任务间可以用消息队列，信号量等手段通信<br>\r\n基本就这些了\r\n\r\n							<div>\r\n								\r\n							</div>\r\n					</div>', '2019-07-10 19:34:22');
INSERT INTO `followcard` VALUES ('113', '18', '2', '<div class=\"post_body post_body_min_h\">\r\n							上电先执行板子里的固化代码，然后是bootloader程序，最后是操作系统了。\r\n\r\n							<div>\r\n								\r\n							</div>\r\n					</div>', '2019-07-10 19:35:00');
INSERT INTO `followcard` VALUES ('114', '18', '2', '<div class=\"post_body post_body_min_h\">\r\n							OS本身也是软件。<br>\r\n<br>\r\n你的硬件配置决定了上电那一刻PC指针指向的初始地址，那里要放启动代码，然后就像4楼说的执行一段bootloader，做的工作是初始化一些必要的硬件，或者加载一些指令到内存，还可以自定义干一些别的东西。bootloader执行到最后会让程序跳转到操作系统的起始地址。这个引导过程结束后OS就开始运行了。<br>\r\n<br>\r\n神马启动代码、bootloader、OS都是软件罢了。只不过编译的方法不一样，存储的地址段不一样，衔接的时候要注意过程，其它的没啥玄妙的。还有单片机固件通常大部分都是自己写的，OS通常都是现成的，只需要移植。\r\n\r\n							<div>\r\n								<div id=\"kp_box_88\" data-pid=\"88\" data-track-click=\"{&quot;mod&quot;:&quot;kp_popu_88-387&quot;,&quot;con&quot;:&quot;,,&quot;}\"><div><iframe width=\"728\" frameborder=\"0\" height=\"90\" scrolling=\"no\" src=\"https://pos.baidu.com/s?hei=90&amp;wid=728&amp;di=u3532146&amp;ltu=https%3A%2F%2Fbbs.csdn.net%2Ftopics%2F360265415&amp;psi=d898e43f711751f74ad886b277dac4a4&amp;tpr=1562758406942&amp;ccd=24&amp;pis=-1x-1&amp;tcn=1562758407&amp;cmi=4&amp;pss=1263x3421&amp;cce=true&amp;prot=2&amp;cdo=-1&amp;ltr=https%3A%2F%2Fso.csdn.net%2Fso%2Fsearch%2Fs.do%3Fq%3D%25E6%2593%258D%25E4%25BD%259C%25E7%25B3%25BB%25E7%25BB%259F%25E4%25B8%258A%25E7%259A%2584%25E6%2593%258D%25E4%25BD%259C%25E7%25B3%25BB%25E7%25BB%259F%26t%3Ddiscuss&amp;cja=false&amp;chi=1&amp;dis=0&amp;dri=0&amp;cpl=3&amp;psr=1280x720&amp;ps=1618x199&amp;cec=UTF-8&amp;ti=%E6%95%B4%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9C%A8%E5%8D%95%E7%89%87%E6%9C%BA%E4%B8%8A%E6%98%AF%E6%80%8E%E4%B9%88%E8%B7%91%E8%B5%B7%E6%9D%A5-CSDN%E8%AE%BA%E5%9D%9B&amp;dai=1&amp;col=zh-CN&amp;dc=3&amp;drs=1&amp;par=1280x680&amp;cfv=0&amp;dtm=HTML_POST&amp;tlm=1562758406&amp;ari=2&amp;ant=0&amp;pcs=1263x614&amp;exps=111000,116008,110011\"></iframe><span style=\"width:0px;height:0px;\"></span></div><script type=\"text/javascript\" src=\"//rabc1.iteye.com/site/js/u0sxl.js?cxpup=mgtw\"></script></div>\r\n							</div>\r\n					</div>', '2019-07-10 19:35:21');
INSERT INTO `followcard` VALUES ('115', '18', '2', '<div class=\"post_body post_body_min_h\">\r\n							<fieldset><legend class=\"font_bold\">引用楼主&nbsp;wen564271778&nbsp;的回复:</legend><blockquote>学完了51单片机，想学学嵌入式操作系统，但是对这个操作系统这个概念不是恨透，希望有人能详细的解答一下整个操作系统在单片机上是怎么跑起来，最好是从通电那一刻开始讲起。先让我有个大体的方向就行。谢谢了</blockquote></fieldset>那么一个os的核心是什么呢？就比如说我拿到一个os的内核，要读懂他的话，应该从哪里入手，然后在以它为中心辐射出去。就好比有一个主函数去调度那些子函数一样。谢谢你拉\r\n\r\n							<div>\r\n								\r\n							</div>\r\n					</div>', '2019-07-10 19:35:39');
INSERT INTO `followcard` VALUES ('116', '19', '2', '<div class=\"post_body post_body_min_h\">\r\n							看看dos内核代码，就知道了。所有硬件CPU对二进制指令是直接识别的。也是相同的。\r\n\r\n							<div>\r\n								\r\n							</div>\r\n					</div>', '2019-07-10 19:37:04');
INSERT INTO `followcard` VALUES ('117', '19', '2', '<div class=\"post_body post_body_min_h\">\r\n							楼上正解！！！\r\n\r\n							<div>\r\n								\r\n							</div>\r\n					</div>', '2019-07-10 19:37:19');
INSERT INTO `followcard` VALUES ('118', '19', '2', '<div class=\"post_body post_body_min_h\">\r\n							指令系统给出的是汇编指令，汇编指令会转成二进制指令，CPU对二进制指令的识别是一样的\r\n\r\n							<div>\r\n								\r\n							</div>\r\n					</div>', '2019-07-10 19:37:47');
INSERT INTO `followcard` VALUES ('119', '20', '2', '<div class=\"post_body post_body_min_h\">\r\n							<fieldset><legend class=\"font_bold\">引用&nbsp;3&nbsp;楼&nbsp;kelibin&nbsp;的回复:</legend><blockquote>指令系统给出的是汇编指令，汇编指令会转成二进制指令，CPU对二进制指令的识别是一样的</blockquote></fieldset><br>\r\n<br>\r\n程序都是直接编译成二进制代码了啊\r\n\r\n							<div>\r\n								\r\n							</div>\r\n					</div>', '2019-07-10 19:39:00');
INSERT INTO `followcard` VALUES ('120', '20', '2', '<div class=\"post_body post_body_min_h\">\r\n							估计是安装包里包含了各种架构的内核文件，安装的时候根据具体架构自动选择的吧<br>\r\n内核之外的东东就跟CPU没有关系了<br>\r\n\r\n\r\n							<div>\r\n								\r\n							</div>\r\n					</div>', '2019-07-10 19:39:20');
INSERT INTO `followcard` VALUES ('121', '11', '2', '<div class=\"post_body post_body_min_h\">\r\n							要是略知一二只要一天就可以了&nbsp;呵呵：）\r\n\r\n							<div>\r\n								\r\n							</div>\r\n					</div>', '2019-07-10 19:42:36');
INSERT INTO `followcard` VALUES ('122', '11', '2', '<div class=\"post_body post_body_min_h\">\r\n							楼主恐怕也只是略知一二而已了\r\n\r\n							<div>\r\n								\r\n							</div>\r\n					</div>', '2019-07-10 19:42:56');
INSERT INTO `followcard` VALUES ('123', '11', '2', '<div class=\"post_body post_body_min_h\">\r\n							强人呀！<br>\r\n我发现现在自己对操作系统几乎一无所知。汗......\r\n\r\n							<div>\r\n								\r\n							</div>\r\n					</div>', '2019-07-10 19:43:26');
INSERT INTO `followcard` VALUES ('124', '11', '2', '<div class=\"post_body post_body_min_h\">\r\n							我跟楼主刚好相反，我会从一开始就抓住每一个细节的。:)\r\n\r\n							<div>\r\n								\r\n							</div>\r\n					</div>', '2019-07-10 19:43:59');
INSERT INTO `followcard` VALUES ('129', '20', '3', '<p>jfdskf</p>', '2019-07-11 15:19:36');

-- ----------------------------
-- Table structure for main_forum
-- ----------------------------
DROP TABLE IF EXISTS `main_forum`;
CREATE TABLE `main_forum` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(20) DEFAULT NULL,
  `info` varchar(60) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of main_forum
-- ----------------------------
INSERT INTO `main_forum` VALUES ('1', '总版块', '总版块');

-- ----------------------------
-- Table structure for notice
-- ----------------------------
DROP TABLE IF EXISTS `notice`;
CREATE TABLE `notice` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `admin_id` int(11) DEFAULT NULL,
  `content` varchar(200) DEFAULT NULL,
  `notice_date` datetime DEFAULT NULL,
  `title` varchar(45) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `admin_id` (`admin_id`)
) ENGINE=InnoDB AUTO_INCREMENT=10 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of notice
-- ----------------------------
INSERT INTO `notice` VALUES ('1', '1', '社区问答-数据结构背后的原理', '2019-07-10 08:48:27', '社区问答-数据结构背后的原理');
INSERT INTO `notice` VALUES ('2', '1', '不容错过，知识库精华资源推荐', '2016-03-20 23:45:00', '不容错过，知识库精华资源推荐');
INSERT INTO `notice` VALUES ('3', '1', '2016年上半年热门下载资源', '2016-03-18 22:09:38', '2016年上半年热门下载资源');
INSERT INTO `notice` VALUES ('4', '1', '问答2016年3月活动开始啦！', '2016-03-19 22:09:38', '问答2016年3月活动开始啦！');
INSERT INTO `notice` VALUES ('9', '1', 'helllo world', '2019-07-11 08:47:53', 'helllo world');

-- ----------------------------
-- Table structure for post
-- ----------------------------
DROP TABLE IF EXISTS `post`;
CREATE TABLE `post` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `sub_forum_id` int(11) DEFAULT NULL,
  `user_id` int(11) DEFAULT NULL,
  `title` tinytext,
  `card_content` longtext,
  `send_date` datetime DEFAULT NULL,
  `post_type` int(11) DEFAULT NULL COMMENT '为0是新帖，为1是热帖，为2是精华帖，默认是0',
  `reply_num` int(11) DEFAULT NULL,
  `view_num` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `forum` (`sub_forum_id`),
  KEY `user_id` (`user_id`)
) ENGINE=InnoDB AUTO_INCREMENT=34 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of post
-- ----------------------------
INSERT INTO `post` VALUES ('1', '1', '2', '求解数据库没外键,怎么建立实体关系 ', 'strsql:=\'create table result as SELECT a.OrgCode,a.OrgName, a.NumberOfPeople, a.MedNum, a.CurrOccupationRatio\r\n     , CASE\r\n比如说主题和回复存在一对多关系,怎么建立符合面向对象的实体关系.\r\n比如说主题的属性有:id title content\r\n回复有id content\r\n这样怎么建立java实体类呀,首先数据库没外键,用@onetomany貌似不行的,求解 ', '2019-07-10 15:03:59', '1', '5', '54');
INSERT INTO `post` VALUES ('2', '1', '1', '是多表连接查询效率高还是多次单表查询效率高啊', '<p>\r\n	6：29</p>SELECT a.*\r\n  FROM CBOSS.CALL_BACK_CRM T, cboss.i_user_radius_index_his a\r\n WHERE t.phone_id = a.bill_id\r\n   and t.so_nbr = a.so_nbr\r\n   and a.act_type = \'06\'\r\n   and t.busi_type = 53\r\n   and result_code not in (\'0\', \'00\',\'1-00\', \'1-0000\', \'2-00\', \'2-0000\')\r\n   and t.create_date >=\r\n       to_date(\'2012-04-15 01:00:00\', \'yyyy-mm-dd hh24:mi:ss\')\r\n   and t.create_date <=\r\n       to_date(\'2012-05-15 01:00:00\', \'yyyy-mm-dd hh24:mi:ss\')\r\n\r\n\r\ncall_back_CRM 表每天有几千万的数据量，不知道多表连接查询好，还是查询单表后再查询另一个单表效率好，，，', '2019-07-10 06:29:25', '1', '5', '54');
INSERT INTO `post` VALUES ('3', '1', '3', '超全的数据库分类介绍', '<p>\r\n	6：35</p>\r\n<article class=\"baidu_pl\">\r\n        <div id=\"article_content\" class=\"article_content clearfix\" data-track-click=\"{&quot;mod&quot;:&quot;popu_307&quot;,&quot;con&quot;:&quot;,https://blog.csdn.net/qq_27565769/article/details/80731213&quot;}\">\r\n                                                <div class=\"article-copyright\">\r\n                        \r\n                        版权声明：【1】http://www.cnblogs.com/yaohong/ 【2】https://blog.csdn.net/qq_27565769                        https://blog.csdn.net/qq_27565769/article/details/80731213                    </div>\r\n                                                    <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-cd6c485e8b.css\">\r\n                                        <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-cd6c485e8b.css\">\r\n                <div class=\"htmledit_views\" id=\"content_views\">\r\n                                            <div class=\"postBody\">\r\n			<div class=\"blogpost-body\"><div>\r\n<h2><a name=\"t0\"></a><strong>〓数据库的分类〓</strong></h2>\r\n<p>数据库通常分为层次式数据库、网络式数据库和关系式数据库三种。而不同的数据库是按不同的数据结构来联系和组织的。</p>\r\n<p>而在当今的互联网中，最常见的数据库模型主要是两种，即关系型数据库和非关系型数据库。</p>\r\n<div class=\"image-package\">\r\n<div class=\"image-container\">\r\n<div class=\"image-container-fill\">&nbsp;</div>\r\n<div class=\"image-view\"><img src=\"//upload-images.jianshu.io/upload_images/228680-448d468546343fa9?imageMogr2/auto-orient/strip%7CimageView2/2/w/640\" alt=\"\"></div>\r\n</div>\r\n<div class=\"image-caption\">&nbsp;数据库分类</div>\r\n</div>\r\n<p><strong>&nbsp;</strong></p>\r\n<h2><a name=\"t1\"></a><strong>〓关系型数据库介绍〓</strong></h2>\r\n<p><strong>&nbsp;</strong></p>\r\n<h3><a name=\"t2\"></a><strong>1、关系型数据库的由来</strong></h3>\r\n<p>虽然网状数据库和层次数据库已经很好的解决了数据的集中和共享问题，但是在数据库独立性和抽象级别上扔有很大欠缺。用户在对这两种数据库进行存取时，仍然需要明确数据的存储结构，指出存取路径。而关系型数据库就可以较好的解决这些问题。</p>\r\n<h3><a name=\"t3\"></a><strong>2、关系型数据库介绍</strong></h3>\r\n<p>关系型数据库模型是把复杂的数据结构归结为简单的二元关系（即二维表格形式）。在关系型数据库中，对数据的操作几乎全部建立在一个或多个关系表格上，通过对这些关联的表格分类、合并、连接或选取等运算来实现数据库的管理。</p>\r\n<p>关系型数据库诞生40多年了，从理论产生发展到现实产品，例如：Oracle和MySQL，Oracle在数据库领域上升到霸主地位，形成每年高达数百亿美元的庞大产业市场。</p>\r\n<h3><a name=\"t4\"></a><strong>3、关系型数据库表格之间的关系举例</strong></h3>\r\n<div class=\"image-package\">\r\n<div class=\"image-container\">\r\n<div class=\"image-container-fill\">&nbsp;</div>\r\n<div class=\"image-view\"><img src=\"//upload-images.jianshu.io/upload_images/228680-945f5401f695df78.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/683\" alt=\"\"></div>\r\n</div>\r\n<div class=\"image-caption\">&nbsp;关系型数据库举例</div>\r\n</div>\r\n<p><strong>&nbsp;</strong></p>\r\n<h2><a name=\"t5\"></a><strong>〓非关系型数据库介绍〓</strong></h2>\r\n<p><strong>&nbsp;</strong></p>\r\n<h3><a name=\"t6\"></a><strong>1、非关系型数据库诞生背景</strong></h3>\r\n<p>NoSQL，泛指非关系型的数据库。随着互联网web2.0网站的兴起，传统的关系数据库在应付web2.0网站，特别是超大规模和高并发的SNS类型的web2.0纯动态网站已经显得力不从心，暴露了很多难以克服的问题，而非关系型的数据库则由于其本身的特点得到了非常迅速的发展。NoSql数据库在特定的场景下可以发挥出难以想象的高效率和高性能，它是作为对传统关系型数据库的一个有效的补充。</p>\r\n<p>NoSQL(NoSQL = Not Only SQL )，意即“不仅仅是SQL”，是一项全新的数据库革命性运动，早期就有人提出，发展至2009年趋势越发高涨。NoSQL的拥护者们提倡运用非关系型的数据存储，相对于铺天盖地的关系型数据库运用，这一概念无疑是一种全新的思维的注入。</p>\r\n<h3><a name=\"t7\"></a><strong>2、非关系型数据库种类</strong></h3>\r\n<p><strong>&nbsp;</strong></p>\r\n<p><strong>（1）键值存储数据库（key-value）</strong></p>\r\n<p>键值数据库就类似传统语言中使用的哈希表。可以通过key来添加、查询或者删除数据库，因为使用key主键访问，所以会获得很高的性能及扩展性。</p>\r\n<p>键值数据库主要使用一个哈希表，这个表中有一个特定的键和一个指针指向特定的数据。Key/value模型对于IT系统来说的优势在于简单、易部署、高并发。</p>\r\n<p><strong>典型产品：</strong>Memcached、Redis、MemcacheDB</p>\r\n<p><strong>（2）列存储（Column-oriented）数据库</strong></p>\r\n<p>列存储数据库将数据存储在列族中，一个列族存储经常被一起查询的相关数据，比如人类，我们经常会查询某个人的姓名和年龄，而不是薪资。这种情况下姓名和年龄会被放到一个列族中，薪资会被放到另一个列族中。</p>\r\n<p>这种数据库通常用来应对分布式存储海量数据。</p>\r\n<p><strong>典型产品：</strong>Cassandra、HBase</p>\r\n<p><strong>（3）面向文档（Document-Oriented）数据库</strong></p>\r\n<p>文档型数据库的灵感是来自于Lotus Notes办公软件，而且它同第一种键值数据库类似。该类型的数据模型是版本化的文档，半结构化的文档以特定的格式存储，比如JSON。文档型数据库可以看作是键值数据库的升级版，允许之间嵌套键值。而且文档型数据库比键值数据库的查询效率更高。</p>\r\n<p>面向文档数据库会将数据以文档形式存储。每个文档都是自包含的数据单元，是一系列数据项的集合。每个数据项都有一个名词与对应值，值既可以是简单的数据类型，如字符串、数字和日期等；也可以是复杂的类型，如有序列表和关联对象。数据存储的最小单位是文档，同一个表中存储的文档属性可以是不同的，数据可以使用XML、JSON或JSONB等多种形式存储。</p>\r\n<p><strong>典型产品：</strong>MongoDB、CouchDB</p>\r\n<p><strong>（4）图形数据库</strong></p>\r\n<p>图形数据库允许我们将数据以图的方式存储。实体会被作为顶点，而实体之间的关系则会被作为边。比如我们有三个实体，Steve Jobs、Apple和Next，则会有两个“Founded by”的边将Apple和Next连接到Steve Jobs。</p>\r\n<p><strong>典型产品：</strong>Neo4J、InforGrid</p>\r\n</div></div><div></div>\r\n<div class=\"clear\"></div>\r\n<div>\r\n<div></div>\r\n<div></div>\r\n<div>\r\n</div>\r\n<div class=\"clear\"></div>\r\n<div></div>\r\n</div>\r\n\r\n\r\n		</div>                                    </div>\r\n                    </div>\r\n    </article>', '2019-07-10 06:36:42', '1', '5', '52');
INSERT INTO `post` VALUES ('5', '1', '3', '数据库！数据库！oracle 数据库救急！！！', '<p>\r\n	9:16</p>\r\n  求两个 timestamp  类型 日期之间的相差小时数！\r\n\r\n     t1-t2   要返回小时数！（默认返回 带天数的字符串）\r\n\r\n       试了 N 遍 老出错！求救！\r\n              先谢谢各位大侠！ ', '2019-07-10 09:16:35', '1', '5', '50');
INSERT INTO `post` VALUES ('6', '1', '3', '关系型数据库与数据库管理系统', '<p>\r\n	<strong><em><u>15:21</u></em></strong></p>\r\n  主要是想记录下自己的读书笔记，忘大家理解。数据库是应对信息资源(及大量数据)的管理需求而产生的。数据库管理技术先后经历了三个阶段:人工管理、文件系统、数据库系统。在数据库模型主要有层次模型、网状模型和关系型，使用普及的是关系型----关系型数据库的理论基础。\n\n        关系型数据库是建立在关系模型基础上的数据库，借助于集合代数等数学概念和处理方法来处理数据库中的数据，现实世界中的各种实体之间的各种联系都可以使用关系型数据库。\n\n        关系模型以二维表来描述数据。在关系模型中，每个表都有多个字段列和记录行，每个字段列有固定的类型属性(如数字、字符等类型)。关系型数据结构简单，清晰，具有很高的数据独立性。\n\n        在关系型数据库中，关系可以看到由行和列交叉的二维表，表中一行可以称为一个元祖，可以用来标识实体集合中的一个实体。表的列称为属性，每一列都有一个属性名，表中的属性名不能相同。列的取值范围称为域，同列都有相同的域(取值范围)。不同的列也可以有相同的域。表中任意两行(元组)不能相同。唯一标识表中不同行属性和属性组称为主键和复合主键。\n\n       关系型数据库与传统的二维表数据文件具有类似之处，但是他们也有区别，严格的说，关系是一种规范化的二维表，它的性质如下：\n\n1.属性值具有原子性，不可分解。\n\n2.没有重复的元组及没有重复的行。\n\n3.理论上没有行序，但有时使用可以有行序。\n\n       关系型数据库中，关键码(键)的关系型的一个非常重要的一个概念，它通常是行(元组)的一个或几个列(属性)。如果键是由一个列组成，则可以称为唯一键；若多个列(属性)组成的则可以称为复合键，键的主要类型如下:\n\n           1.超键：在一个关系中，能唯一标识元组的属性或属性集称为关系的超键；\n\n           2.候选键：如果一个属性集能唯一标识元组，且又不含有多余的属性，那么这个属性集称为关系型候选键；\n\n           3.主键：如果一个关系中有多个候选键，则选择其中的一个键作为关系的主键。用主键可以实现关系定义中“表中任意两行(元组)不能相同”的约束。\n\n            这里我们举例说明，如学生表里的学号，我们把它设为主键则这个学号只能是唯一的，不能添加相同的学号进行存储。\n\n           4外键:如果一个关系R中包含另一个关系A的主键所对应的属性组T，则称为属性组T为关系R的外键，并称关系A为参照关系，关系R是依赖关系。为表示关联，可以将一个    关系的主键作为属性放在另一个关系中，第二个关系中的那些属性就称为外键。\n\n这里我们以商品销售为例。在填写销售单的时候我们把商品的ID设为外键，则查询的时候直接查询商品ID就可以把商品的信息直接带出。\r\n--------------------- \r\n作者：Autism丶Deng \r\n来源：CSDN \r\n原文：https://blog.csdn.net/u011113606/article/details/73384771 \r\n版权声明：本文为博主原创文章，转载请附上博文链接！', '2019-07-10 15:21:31', '1', '5', '51');
INSERT INTO `post` VALUES ('7', '1', '1', '数据库1_五大主流数据库模型', '<article class=\"baidu_pl\">\r\n        <div id=\"article_content\" class=\"article_content clearfix\" data-track-click=\"{&quot;mod&quot;:&quot;popu_307&quot;,&quot;con&quot;:&quot;,https://blog.csdn.net/wang_zhenwei/article/details/52205190&quot;}\">\r\n                                    <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-cd6c485e8b.css\">\r\n                                        <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-cd6c485e8b.css\">\r\n                <div class=\"htmledit_views\" id=\"content_views\">\r\n                                            \r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;\">\r\n<strong><span style=\"font-family:\'微软雅黑\';\">文章时间：2012年</span></strong></p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;\">\r\n<strong><span style=\"font-family:\'微软雅黑\';\">导读：</span></strong><span style=\"font-family:\'微软雅黑\';\">无论是关系型<a href=\"http://lib.csdn.net/base/14\" rel=\"nofollow\" class=\"replace_word\" title=\"MySQL知识库\" style=\"color:rgb(223,52,52);text-decoration:none;font-weight:bold;\">数据库</a>还是非关系型数据库，都是某种数据模型的实现。本文将为大家简要介绍5种常见的数据模型，让我们来追本溯源，窥探现在流行的数据库解决方案背后的神秘世界。</span></p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;text-align:center;\">\r\n<img border=\"0\" alt=\"\" width=\"1024\" height=\"768\" src=\"http://cms.csdnimg.cn/articlev1/uploads/allimg/120312/120_120312213536_1.jpg\" style=\"border:none;vertical-align:middle;width:500px;\"></p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;\">\r\n<span style=\"font-family:\'微软雅黑\';\"><strong>什么是数据模型？</strong></span></p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;\">\r\n<span style=\"font-family:\'微软雅黑\';\">访问数据库中的数据取决于数据库实现的数据模型。数据模型会影响客户端通过API对数据的操作。不同的数据模型可能会提供或多或少的功能。一般而言，数据模型不会直接提供过多的功能，许多功能必须由客户端自行实现。</span></p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;\">\r\n<span style=\"font-family:\'微软雅黑\';\">数据模型决定了客户端如何对数据进行编码存储。应用程序需要某种域模型与存储技术支持的特性进行映射。</span></p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;\">\r\n<span style=\"font-family:\'微软雅黑\';\">迄今为止，主导的数据模型仍然是关系模型。在这里，我们主要想为大家介绍一下非关系模型，作为对比，本文也会简要介绍一下关系模型。</span></p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;text-align:center;\">\r\n<img border=\"0\" alt=\"\" width=\"838\" height=\"472\" src=\"http://cms.csdnimg.cn/articlev1/uploads/allimg/120312/120_120312221903_1.gif\" style=\"border:none;vertical-align:middle;width:491px;\"></p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;\">\r\n<span style=\"font-family:\'微软雅黑\';\"><strong>数据模型概述</strong></span></p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;\">\r\n<span style=\"font-family:\'微软雅黑\';\"><strong>1.关系模型</strong></span></p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;\">\r\n<span style=\"font-family:\'微软雅黑\';\">关系模型使用记录（由元组组成）进行存储，记录存储在表中，表由<a href=\"http://lib.csdn.net/base/16\" rel=\"nofollow\" class=\"replace_word\" title=\"大型网站架构知识库\" style=\"color:rgb(223,52,52);text-decoration:none;font-weight:bold;\">架构</a>界定。表中的每个列都有名称和类型，表中的所有记录都要符合表的定义。SQL是专门的查询语言，提供相应的语法查找符合条件的记录，如表联接（Join）。表联接可以基于表之间的关系在多表之间查询记录。</span></p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;\">\r\n<span style=\"font-family:\'微软雅黑\';\">表中的记录可以被创建和删除，记录中的字段也可以单独更新。</span></p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;\">\r\n<span style=\"font-family:\'微软雅黑\';\">关系模型数据库通常提供事务处理机制，这为涉及多条记录的自动化处理提供了解决方案。</span></p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;\">\r\n<span style=\"font-family:\'微软雅黑\';\">对不同的编程语言而言，表可以被看成数组、记录列表或者结构。表可以使用B树和哈希表进行索引，以应对高性能访问。</span></p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;\">\r\n<span style=\"font-family:\'微软雅黑\';\"><strong>2.键值存储</strong></span></p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;\">\r\n<span style=\"font-family:\'微软雅黑\';\">键值存储提供了基于键对值的访问方式。</span></p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;\">\r\n<span style=\"font-family:\'微软雅黑\';\">键值对可以被创建或删除，与键相关联的值可以被更新。</span></p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;\">\r\n<span style=\"font-family:\'微软雅黑\';\">键值存储一般不提供事务处理机制。</span></p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;\">\r\n<span style=\"font-family:\'微软雅黑\';\">对不同的编程语言而言，键值存储类似于哈希表。对此，不同的编程语言有不同的名字（如，<a href=\"http://lib.csdn.net/base/17\" rel=\"nofollow\" class=\"replace_word\" title=\"Java EE知识库\" style=\"color:rgb(223,52,52);text-decoration:none;font-weight:bold;\">Java</a>称之为“HashMap”，Perl称之为“hash”，<a href=\"http://lib.csdn.net/base/11\" rel=\"nofollow\" class=\"replace_word\" title=\"Python知识库\" style=\"color:rgb(223,52,52);text-decoration:none;font-weight:bold;\">Python</a>称之为“dict”，PHP称之为“associative\r\n array”），C++则称之为“boost::unordered_map&lt;...&gt;”。</span></p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;\">\r\n<span style=\"font-family:\'微软雅黑\';\">键值存储支持键上自有的隐式索引。</span></p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;\">\r\n<span style=\"font-family:\'微软雅黑\';\">键值存储看起来好像不太有用，但却可以在“值”上存储大量信息。“值”可以是一个XML文档，一个JSON对象，或者其它任何序列化形式。</span></p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;\">\r\n<span style=\"font-family:\'微软雅黑\';\">重要的是，键值存储引擎并不在意“值”的内部结构，它依赖客户端对“值”进行解释和管理。</span></p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;text-align:center;\">\r\n<img border=\"0\" alt=\"\" width=\"500\" height=\"166\" src=\"http://cms.csdnimg.cn/articlev1/uploads/allimg/120312/120_120312221517_1.png\" style=\"border:none;vertical-align:middle;width:515px;\"></p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;\">\r\n<span style=\"font-family:\'微软雅黑\';\"><strong>3.文档存储</strong></span></p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;\">\r\n<span style=\"font-family:\'微软雅黑\';\">文档存储支持对结构化数据的访问，不同于关系模型的是，文档存储没有强制的架构。</span></p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;\">\r\n<span style=\"font-family:\'微软雅黑\';\">事实上，文档存储以封包键值对的方式进行存储。在这种情况下，应用对要检索的封包采取一些约定，或者利用存储引擎的能力将不同的文档划分成不同的集合，以管理数据。</span></p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;\">\r\n<span style=\"font-family:\'微软雅黑\';\">与关系模型不同的是，文档存储模型支持嵌套结构。例如，文档存储模型支持XML和JSON文档，字段的“值”又可以嵌套存储其它文档。文档存储模型也支持数组和列值键。</span></p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;\">\r\n<span style=\"font-family:\'微软雅黑\';\">与键值存储不同的是，文档存储关心文档的内部结构。这使得存储引擎可以直接支持二级索引，从而允许对任意字段进行高效查询。支持文档嵌套存储的能力，使得查询语言具有搜索嵌套对象的能力，<a href=\"http://www.w3schools.com/xquery/default.asp\" rel=\"nofollow\" style=\"color:rgb(0,102,204);text-decoration:none;\">XQuery</a>就是一个例子。<a href=\"http://www.mongodb.org/\" rel=\"nofollow\" style=\"color:rgb(0,102,204);text-decoration:none;\">MongoDB</a>通过支持在查询中指定JSON字段路径实现类似的功能。</span></p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;text-align:center;\">\r\n<img border=\"0\" alt=\"\" width=\"2000\" height=\"473\" src=\"http://cms.csdnimg.cn/articlev1/uploads/allimg/120312/120_120312222806_1.gif\" style=\"border:none;vertical-align:middle;width:535px;\"></p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;\">\r\n<span style=\"font-family:\'微软雅黑\';\"><strong>4.列式存储</strong></span></p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;\">\r\n<span style=\"font-family:\'微软雅黑\';\">如果翻转数据，列式存储与关系存储将会非常相似。与关系模型存储记录不同，列式存储以流的方式在列中存储所有的数据。对于任何记录，索引都可以快速地获取列上的数据。</span></p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;\">\r\n<span style=\"font-family:\'微软雅黑\';\">Map-reduce的实现<a href=\"http://hadoop.apache.org/\" rel=\"nofollow\" style=\"color:rgb(0,102,204);text-decoration:none;\">Hadoop</a>的流数据处理效率非常高，列式存储的优点体现的淋漓极致。因此，<a href=\"http://hbase.apache.org/\" rel=\"nofollow\" style=\"color:rgb(0,102,204);text-decoration:none;\">HBase</a>和<a href=\"http://hypertable.org/\" rel=\"nofollow\" style=\"color:rgb(0,102,204);text-decoration:none;\">Hypertable</a>通常作为非关系型数据仓库，为Map-reduce进行数据分析提供支持。</span></p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;\">\r\n<span style=\"font-family:\'微软雅黑\';\">关系类型的列标对数据分析效果不好，因此，用户经常将更复杂的数据存储在列式数据库中。这直接体现在<a href=\"http://cassandra.apache.org/\" rel=\"nofollow\" style=\"color:rgb(0,102,204);text-decoration:none;\">Cassandra</a>中，它引入的“column family”可以被认为是一个“super-column”。</span></p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;\">\r\n<span style=\"font-family:\'微软雅黑\';\">列式存储支持行检索，但这需要从每个列获取匹配的列值，并重新组成行。</span></p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;\">\r\n<span style=\"font-family:\'微软雅黑\';\">(列式数据库InfoBright 数据仓库性能很不错)</span></p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;\">\r\n<span style=\"font-family:\'微软雅黑\';\"><strong>5.图形数据库</strong></span></p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;\">\r\n<span style=\"font-family:\'微软雅黑\';\">图形数据库存储顶点和边的信息，有的支持添加注释。</span></p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;\">\r\n<span style=\"font-family:\'微软雅黑\';\">图形数据库可用于对事物建模，如社交图谱、真实世界的各种对象。<a href=\"http://www.imdb.com/\" rel=\"nofollow\" style=\"color:rgb(0,102,204);text-decoration:none;\">IMDB</a>（Internet Movie Database）站点的内容就组成了一幅复杂的图像，演员与电影彼此交织在一起。</span></p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;\">\r\n<span style=\"font-family:\'微软雅黑\';\">图形数据库的查询语言一般用于查找图形中断点的路径，或端点之间路径的属性。<a href=\"http://neo4j.org/\" rel=\"nofollow\" style=\"color:rgb(0,102,204);text-decoration:none;\">Neo4j</a>是一个典型的图形数据库。</span></p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;\">\r\n<strong><span style=\"font-family:\'微软雅黑\';\">选择哪一种数据模型？</span></strong></p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;\">\r\n<span style=\"font-family:\'微软雅黑\';\">数据模型有着各自的优缺点，它们适用于不同的领域。不管是选择关系模型，还是非关系模型，都要根据实际应用的场景做出选择。也许你会发现单一的数据模型不能满足你的解决方案，许多大型应用可能需要集成多种数据模型。（张志平/编译）</span></p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;\">\r\n<span style=\"font-family:\'微软雅黑\';\"><br></span></p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;\">\r\n<span style=\"font-family:\'微软雅黑\';\"></span></p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;\">\r\n<strong><a href=\"http://cloud.csdn.net/a/20120314/313107.html\" rel=\"nofollow\" style=\"color:rgb(0,102,204);text-decoration:none;\">五个值得关注的图形数据库</a></strong></p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;\">\r\n图形数据库是一种非关系型数据库，它应用图形理论存储实体之间的关系信息。最常见的一个例子，就是社会网络中人与人之间的关系。关系型数据库用于存储“关系型”数据的效果并不好，其查询复杂、缓慢、超出预期，而图形数据库的独特设计恰恰弥补了这个缺陷。</p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;\">\r\nGoogle的图形计算系统名为Pregel，下面让我们来为您介绍几个流行的图形数据库。</p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;\">\r\n<strong>1. Neo4j</strong></p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;text-align:center;\">\r\n<img alt=\"\" src=\"http://cms.csdnimg.cn/articlev1/uploads/allimg/120314/120_120314151751_1.jpg\" style=\"border:none;vertical-align:middle;\"></p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;\">\r\nNeo4j是一个流行的图形数据库，它是开源的。</p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;\">\r\n<strong>2. FlockDB</strong></p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;text-align:center;\">\r\n<img alt=\"\" src=\"http://cms.csdnimg.cn/articlev1/uploads/allimg/120314/120_120314152643_1.jpg\" style=\"border:none;vertical-align:middle;\"></p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;\">\r\nFlockDB是Twitter为进行关系数据分析而构建的。FlockDB迄今为止还没有稳定的版本，对于它是否是一个真正的图形数据库，尚有争议。</p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;\">\r\n<strong>3. AllegroGraph</strong></p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;text-align:center;\">\r\n<img alt=\"\" src=\"http://cms.csdnimg.cn/articlev1/uploads/allimg/120314/120_120314153741_1.jpg\" style=\"border:none;vertical-align:middle;\"></p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;\">\r\nAllegroGraph是一个基于W3c标准的为资源描述框架构建的图形数据库。它为处理链接数据和Web语义而设计，支持SPARQL、RDFS++和Prolog。</p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;\">\r\n<strong>4. GraphDB</strong></p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;text-align:center;\">\r\n<img alt=\"\" src=\"http://cms.csdnimg.cn/articlev1/uploads/allimg/120314/120_120314155552_1.jpg\" style=\"border:none;vertical-align:middle;\"></p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;\">\r\nGraphDB是德国sones公司在.NET基础上构建的。GraphDB托管在Windows Azure平台上。</p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;\">\r\n<strong>5. InfiniteGraph</strong></p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;text-align:center;\">\r\n<img alt=\"\" src=\"http://cms.csdnimg.cn/articlev1/uploads/allimg/120314/120_120314161021_1.jpg\" style=\"border:none;vertical-align:middle;\"></p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;\">\r\nInfiniteGraph基于Java实现，它的目标是构建“分布式的图形数据库”，已被美国国防部和美国中央情报局所采用。</p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;\">\r\n<strong><a href=\"http://cloud.csdn.net/a/20120312/313039.html\" rel=\"nofollow\" style=\"color:rgb(0,102,204);text-decoration:none;\">下一代</a><a href=\"http://lib.csdn.net/base/20\" rel=\"nofollow\" class=\"replace_word\" title=\"Hadoop知识库\" style=\"color:rgb(223,52,52);text-decoration:none;\">Hadoop</a>战略——数据即平台</strong></p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;text-align:center;\">\r\n<img alt=\"\" src=\"http://cms.csdnimg.cn/articlev1/uploads/allimg/120312/79_120312164937_1.jpg\" style=\"border:none;vertical-align:middle;\"></p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;\">\r\n在上周的Strata大会上，与会者透露出有关下代Hadoop的消息。包括对6000节点的支持、配备高可用性的HDFS以及下一代MapReduce的特性等。而未来Hadoop替代操作系统的大胆想法也让我们充满无限遐想。</p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;\">\r\n在Strata会议上Hortonworks创始人和Apache Hadoop项目VP Arun Murthy透露新版Hadoop的相关特性。下一代的Hadoop将支持6000节点，同时配备高可用性的HDFS（Hadoop Distributed File System）。</p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;\">\r\n而下一代MapReduce框架则被命名为YARN或MRv2（MapReduce version 2）。新框架已经不再是传统的MapReduce框架，甚至与MapReduce无关，YARN可被看做是通用的运行时框架，用户可以编写自己的计算框架，在该运行环境中运行。经过改良的MapReduce将分离HDFS中块和命名空间的管理，提高数据的可伸缩性。最重要的是改良后的MapReduce将对非MapReduce应用进行支持，这使得更多类型应用将具备在MapReduce工作的能力。</p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;\">\r\n<strong><a href=\"http://cloud.csdn.net/a/20120312/313004.html\" rel=\"nofollow\" style=\"color:rgb(0,102,204);text-decoration:none;\">谷歌算法揭秘：一次搜索请求平均往返2400公里</a></strong></p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;text-align:center;\">\r\n<img alt=\"谷歌算法揭秘：整合Google+ 去年有520项改进\" src=\"http://cms.csdnimg.cn/articlev1/uploads/allimg/120312/101Q15O3-0.jpg\" style=\"border:none;vertical-align:middle;\"></p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;text-align:center;\">\r\n谷歌搜索演进</p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;\">\r\n作为全球使用最广泛的搜索引擎，谷歌算法一直有一层神秘面纱。近日谷歌工程总监斯科特·霍夫曼向腾讯科技讲述谷歌算法幕后故事，称2011年有520多项改进，自2003年到现在，Google搜索已解决4500亿个搜索请求。</p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;\">\r\n斯科特还透露，谷歌一个搜索请求平均往返于电脑和数据中心单程距离是750英里，这也意味着一次搜索请求平均往返需要1500英里，约合2400公里。</p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;\">\r\n<a href=\"http://cloud.csdn.net/a/20120313/313076.html\" rel=\"nofollow\" style=\"color:rgb(0,102,204);text-decoration:none;\"><strong>RavenDB：基于Windows/.NET平台的NoSQL数据库</strong></a></p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;text-align:center;\">\r\n<img alt=\"\" src=\"http://cms.csdnimg.cn/articlev1/uploads/allimg/120313/79_120313162004_1.png\" style=\"border:none;vertical-align:middle;\"></p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;\">\r\n众所周知，NoSQL运动旨在成为<a href=\"http://lib.csdn.net/base/20\" rel=\"nofollow\" class=\"replace_word\" title=\"Hadoop知识库\" style=\"color:rgb(223,52,52);text-decoration:none;font-weight:bold;\">大数据</a>时代传统关系数据库管理系统的替代品。如今Microsoft对开源的态度有所转变，RavenDB就是很好的例子。Microsoft对RavenDB（NoSQL数据库）的认可令很多人感到惊讶。RavenDB可以轻易的替代关系数据库管理系统并兼容以往的.NET应用。</p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;\">\r\nRavenDB是针对Windows/.NET平台而设计的文档数据库。RavenDB的出现将.NET应用与非关系数据库连接到一起。数据以Shcema-less方式存储，并直接通过HTTP、RESTful API或更方便的.NET客户端API连接。.NET客户端API使用LINQ操作RavenDB数据库文档存储。</p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;\">\r\n<strong><a href=\"http://cloud.csdn.net/a/20120315/313160.html\" rel=\"nofollow\" style=\"color:rgb(0,102,204);text-decoration:none;\"></a><a href=\"http://lib.csdn.net/base/20\" rel=\"nofollow\" class=\"replace_word\" title=\"Hadoop知识库\" style=\"color:rgb(223,52,52);text-decoration:none;\">云计算</a>：亚马逊第一\r\n 第二把交椅何人坐？</strong></p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;text-align:center;\">\r\n<img alt=\"\" src=\"http://cms.csdnimg.cn/articlev1/uploads/allimg/120316/112_120316085556_1.jpg\" style=\"border:none;vertical-align:middle;\"></p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;\">\r\n亚马逊对用户推出的Web服务，使它成为迄今为止最大的云服务提供商。就像大多数的大型云供应商一样，亚马逊并没有就当前或计划中的数据中心透露太多。</p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;\">\r\n埃森哲分析师Huan Liu的最新研究结果显示，亚马逊的Elastic Compute Cloud（EC2）在高达45万台服务器上运行。亚马逊没有公布AWS的营收，但有人表示它可能已经是一项10亿美元的业务。</p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;\">\r\n本文预计Rackspace、Google、微软、IBM、惠普、VMware、Facebook这七家公司将成为亚马逊的云对手。</p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;\">\r\n<strong><a href=\"http://cloud.csdn.net/a/20120313/313050.html\" rel=\"nofollow\" style=\"color:rgb(0,102,204);text-decoration:none;\">新密钥技术简化云端数据加密</a></strong></p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;\">\r\n由于在云环境中，IT团队缺乏对数据安全的直接控制，所以数据迁移到云环境将会给IT团队带来新的复杂的安全问题。此外，云供应商认为数据安全是需要共同承担责任，即服务供应商保证物理安全，用户必须保护其服务器和数据的安全。这将需要新的加密策略和密钥管理策略，将密钥存储在云环境外部，而不是云环境中。</p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;\">\r\n初创安全公司Porticor刚刚推出了一个解决方案，专门解决云环境中静态数据安全问题。Porticor公司提供了一种分离密钥加密解决方案，云客户是唯一知道主密钥的人。另外，Porticor公司解决了所有与加密数据有关的复杂问题，客户几乎不要去想这些问题。这种独特的密钥管理解决方案既提供了安全性，也提供了便利性。</p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;\">\r\n<strong><a href=\"http://cloud.csdn.net/a/20120312/312974.html\" rel=\"nofollow\" style=\"color:rgb(0,102,204);text-decoration:none;\">微软下调Azure云服务价格 与亚马逊竞争</a></strong></p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;\">\r\n微软上周下调了其Azure云存储服务和Windows Azure Extra Small计算服务的价格。此举是微软在亚马逊下调其Web服务价格几天之后采取的行动。</p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;\">\r\n这一切意味着什么？对于IT买主来说，云计算价格正在迅速下降并且已经与电费水平一样。考虑到电费受天然气价格、季节和其它可变因素的影响，云计算的价格可能更便宜。</p>\r\n<p style=\"color:rgb(51,51,51);font-size:14px;list-style:none;font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:24px;\">\r\n<span style=\"font-family:\'微软雅黑\';\">原文地址：http://www.csdn.net/article/2012-03-16/313206</span></p>\r\n                                    </div>\r\n                    </div>\r\n    </article>', '2019-07-04 17:11:18', '1', '5', '50');
INSERT INTO `post` VALUES ('8', '1', '1', '简述数据库系统', '<article class=\"baidu_pl\">\r\n        <div id=\"article_content\" class=\"article_content clearfix\" data-track-click=\"{&quot;mod&quot;:&quot;popu_307&quot;,&quot;con&quot;:&quot;,https://blog.csdn.net/hty46565/article/details/57403625&quot;}\">\r\n                                    <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-cd6c485e8b.css\">\r\n                                        <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-cd6c485e8b.css\">\r\n                <div class=\"htmledit_views\" id=\"content_views\">\r\n                                            \r\n<p><span style=\"font-family:\'等线\';font-size:14px;\">一、数据库系统</span></p>\r\n<p style=\"text-indent:21pt;\"><span style=\"font-family:\'等线\';font-size:14px;\">数据库系统是由数据库、数据库管理系统、应用程序和数据库管理员组成的存储、管理、处理和维护数据的系统。</span></p>\r\n<p style=\"text-indent:21pt;\"><span style=\"font-family:\'等线\';font-size:14px;\">以上这句话是对数据库系统非常严谨的定义。我这篇博客是想从自己的角度来重新认识一下数据库系统。在逐个剖析以上这些名词的含义之前先考虑一个问题：我们为什么要引入数据库系统？换句话说，引入数据库系统可以帮助我们解决什么问题？</span></p>\r\n<p><span style=\"font-family:\'等线\';font-size:14px;\">二、引入数据库系统的必要性</span></p>\r\n<p style=\"text-indent:21pt;\"><span style=\"font-family:\'等线\';font-size:14px;\">数据，也叫做信息资源，已经成为各个组织最宝贵的无形财产，因此各个组织机构也都十分需要一个可以存储和处理数据的技术。尤其是进入互联网时代以来，数据量大幅度的增长，用户每天用各种终端访问各种服务器里的数据，那么数据的存储和处理技术就显得更为重要了。数据库系统由此产生，数据库系统就是存储、管理、处理和维护数据的系统。介绍完这个后就接着聊一下数据库系统的组成部分。</span></p>\r\n<p><span style=\"font-family:\'等线\';font-size:14px;\">三、数据库系统的组成部分</span></p>\r\n<p style=\"text-indent:21pt;\"><span style=\"font-family:\'等线\';font-size:14px;\">数据库系统由数据库、数据库管理系统、应用程序、数据库管理员四部分组成。</span></p>\r\n<p><span lang=\"en-us\" xml:lang=\"en-us\"><span style=\"font-family:\'等线\';font-size:14px;\">1.</span></span><span style=\"font-family:\'等线\';font-size:14px;\">数据库</span></p>\r\n<p style=\"text-indent:21pt;\"><span style=\"font-family:\'等线\';font-size:14px;\">顾名思义，数据库就是存放数据的仓库，只不过这个仓库是在计算机的存储设备上，类似于我们会将现实中的仓库中的货物按一定规律存放，数据也是按一定的格式存放在数据库中的。</span></p>\r\n<p><span lang=\"en-us\" xml:lang=\"en-us\"><span style=\"font-family:\'等线\';font-size:14px;\">2.</span></span><span style=\"font-family:\'等线\';font-size:14px;\">数据库管理系统</span></p>\r\n<p style=\"text-indent:21pt;\"><span style=\"font-family:\'等线\';font-size:14px;\">我们有了数据库这个仓库来存放我们的数据了，那么，是不是就需要一个有效组织管理数据的工具？完成这个任务的就是数据库管理系统。</span></p>\r\n<p><span lang=\"en-us\" xml:lang=\"en-us\"><span style=\"font-family:\'等线\';font-size:14px;\">3.</span></span><span style=\"font-family:\'等线\';font-size:14px;\">应用程序</span></p>\r\n<p style=\"text-indent:21pt;\"><span style=\"font-family:\'等线\';font-size:14px;\">用与数据库接口的高级语言开发出的应用程序。</span></p>\r\n<p><span lang=\"en-us\" xml:lang=\"en-us\"><span style=\"font-family:\'等线\';font-size:14px;\">4.</span></span><span style=\"font-family:\'等线\';font-size:14px;\">数据库管理员</span></p>\r\n<p style=\"text-indent:21pt;\"><span style=\"font-family:\'等线\';font-size:14px;\">人员也算是数据库系统的一部分。数据库管理员负责管理和控制数据库系统。</span></p>\r\n<p><span lang=\"en-us\" xml:lang=\"en-us\"><span style=\"font-family:\'等线\';font-size:14px;\">&nbsp;</span></span></p>\r\n<p style=\"text-indent:21pt;\"><span style=\"font-family:\'等线\';font-size:14px;\">到此，数据库系统是个什么东西我们就理解了。接下来，我们聊一聊数据库系统在计算机中处于什么位置。我们从底层往上层说，首先最底层的一定是硬件，接下来硬件上面有计算机的操作系统，然后是数据库管理系统，接下来是应用开发工具，最后是应用程序。也就是：硬件</span><span lang=\"en-us\" xml:lang=\"en-us\"><span style=\"font-family:\'等线\';font-size:14px;\">-&gt;</span></span><span style=\"font-family:\'等线\';font-size:14px;\">计算机操作系统</span><span lang=\"en-us\" xml:lang=\"en-us\"><span style=\"font-family:\'等线\';font-size:14px;\">-&gt;</span></span><span style=\"font-family:\'等线\';font-size:14px;\">数据库管理系统</span><span lang=\"en-us\" xml:lang=\"en-us\"><span style=\"font-family:\'等线\';font-size:14px;\">-&gt;</span></span><span style=\"font-family:\'等线\';font-size:14px;\">应用开发工具</span><span lang=\"en-us\" xml:lang=\"en-us\"><span style=\"font-family:\'等线\';font-size:14px;\">-&gt;</span></span><span style=\"font-family:\'等线\';font-size:14px;\">应用程序。</span></p>\r\n<p style=\"text-indent:21pt;\"><span style=\"font-family:\'等线\';font-size:14px;\">看到这里，我就会想起另一种数据集合的存储管理系统：文件系统。相信大家会有一个疑问产生：文件系统和数据库系统之间有什么区别？这里我先暂不详述，留待以后讨论。现在先讨论一下数据库系统的主要特点。</span></p>\r\n<p><span lang=\"en-us\" xml:lang=\"en-us\"><span style=\"font-family:\'等线\';font-size:14px;\">&nbsp;</span></span></p>\r\n<p><span style=\"font-family:\'等线\';font-size:14px;\">四、数据库系统的主要特点</span></p>\r\n<p><span lang=\"en-us\" xml:lang=\"en-us\"><span style=\"font-family:\'等线\';font-size:14px;\">1.</span></span><span style=\"font-family:\'等线\';font-size:14px;\">数据结构化</span></p>\r\n<p><span lang=\"en-us\" xml:lang=\"en-us\"><span><span style=\"font-family:\'等线\';font-size:14px;\">&nbsp;&nbsp;&nbsp;\r\n<img src=\"https://img-blog.csdn.net/20170226104817509\" alt=\"\"></span></span></span></p>\r\n<p style=\"text-indent:21pt;\"><span style=\"font-family:\'等线\';font-size:14px;\">如图，这里我创建了两个表，一个表用于存储学生的基本信息，另一个表用于存储学生的详细情况。有些学生的经历比较丰富，详细情况的叙述也比较长，有些同学没有详细情况的叙述。表创建好之后，直接可以用</span><span lang=\"en-us\" xml:lang=\"en-us\"><span style=\"font-family:\'等线\';font-size:14px;\">insert\r\n into</span></span><span style=\"font-family:\'等线\';font-size:14px;\">插入数据。然后使用</span><span lang=\"en-us\" xml:lang=\"en-us\"><span style=\"font-family:\'等线\';font-size:14px;\">select</span></span><span style=\"font-family:\'等线\';font-size:14px;\">就可以查询出我们需要的信息。看起来比较简洁明了。</span></p>\r\n<p style=\"text-indent:21pt;\"><span style=\"font-family:\'等线\';font-size:14px;\">如若该系统比较复杂，也是可以创建这种表与表之间的关系。那么，什么是数据结构化呢？</span></p>\r\n<p style=\"text-indent:21pt;\"><span style=\"font-family:\'等线\';font-size:14px;\">数据结构化是指数据库中的数据不再仅仅是面向应用的，而是面向整个组织的。不仅数据的内部具有结构，数据之间也具有联系。数据库整体是结构化的。</span></p>\r\n<p><span lang=\"en-us\" xml:lang=\"en-us\"><span style=\"font-family:\'等线\';font-size:14px;\">2.</span></span><span style=\"font-family:\'等线\';font-size:14px;\">数据的高共享性、低冗余性且易于扩充</span></p>\r\n<p style=\"text-indent:21pt;\"><span style=\"font-family:\'等线\';font-size:14px;\">数据库数据是面向组织的，所以它可以被多个用户、多个应用使用。</span></p>\r\n<p style=\"text-indent:21pt;\"><span style=\"font-family:\'等线\';font-size:14px;\">数据的共享可以减少冗余，节约存储空间。</span></p>\r\n<p style=\"text-indent:21pt;\"><span style=\"font-family:\'等线\';font-size:14px;\">数据的共享不仅仅可以让多个应用同时使用数据库，而且可以增加新的应用。我们可以使用数据库整体的各种子集用于不同的应用系统，当需求改变，只需重新选取不同子集，或者加上一部分数据便可满足新的需求。</span></p>\r\n<p><span lang=\"en-us\" xml:lang=\"en-us\"><span style=\"font-family:\'等线\';font-size:14px;\">3.</span></span><span style=\"font-family:\'等线\';font-size:14px;\">数据独立性高</span></p>\r\n<p style=\"text-indent:21pt;\"><span style=\"font-family:\'等线\';font-size:14px;\">数据独立性又分为物理独立性与逻辑独立性。这里不详述。好处在于减少了应用程序的维护与修改。</span></p>\r\n<p><span lang=\"en-us\" xml:lang=\"en-us\"><span style=\"font-family:\'等线\';font-size:14px;\">4.</span></span><span style=\"font-family:\'等线\';font-size:14px;\">数据由数据库管理系统统一管理和控制</span></p>\r\n<p style=\"text-indent:21pt;\"><span style=\"font-family:\'等线\';font-size:14px;\">数据库的共享会带来数据的安全隐患，所以数据库管理系统必须提供一些管理控制功能。</span></p>\r\n<p><span lang=\"en-us\" xml:lang=\"en-us\"><span style=\"font-family:\'等线\';font-size:14px;\">&nbsp;</span></span></p>\r\n<p><span style=\"font-family:\'等线\';font-size:14px;\">五、文件系统与数据库系统的本质区别</span></p>\r\n<p style=\"text-indent:21pt;\"><span style=\"font-family:\'等线\';font-size:14px;\">分析完数据库系统的特点，想必文件系统与数据库系统之间的区别就出来了。实际上，它们的本质区别在于数据库系统的数据有结构化的特点，而文件系统数据内部是有结构化的，但数据整体不具备这一特点。我们可以考虑一下上面的例子，如果用文件系统来做这样的学生信息管理系统该如何做呢？显然也是可以的，不过程序员的许多精力要放在不同文件中记录之间的联系，使用</span><span lang=\"en-us\" xml:lang=\"en-us\"><span style=\"font-family:\'等线\';font-size:14px;\">fopen</span></span><span style=\"font-family:\'等线\';font-size:14px;\">、</span><span lang=\"en-us\" xml:lang=\"en-us\"><span style=\"font-family:\'等线\';font-size:14px;\">fread</span></span><span style=\"font-family:\'等线\';font-size:14px;\">、</span><span lang=\"en-us\" xml:lang=\"en-us\"><span style=\"font-family:\'等线\';font-size:14px;\">fwrite</span></span><span style=\"font-family:\'等线\';font-size:14px;\">、</span><span lang=\"en-us\" xml:lang=\"en-us\"><span style=\"font-family:\'等线\';font-size:14px;\">fseek</span></span><span style=\"font-family:\'等线\';font-size:14px;\">、</span><span lang=\"en-us\" xml:lang=\"en-us\"><span style=\"font-family:\'等线\';font-size:14px;\">fclose</span></span><span style=\"font-family:\'等线\';font-size:14px;\">等调用来操作，会特别麻烦。而用拥有数据结构化特点的数据库系统只需要一个语句就可以实现这些功能。</span></p>\r\n<p><span lang=\"en-us\" xml:lang=\"en-us\"><span><span style=\"font-family:\'等线\';font-size:14px;\">&nbsp;&nbsp;&nbsp;\r\n</span></span></span></p>\r\n                                    </div>\r\n                    </div>\r\n    </article>', '2019-07-05 17:16:58', '1', '5', '50');
INSERT INTO `post` VALUES ('10', '1', '1', '数据库的优点', '<div class=\"htmledit_views\" id=\"content_views\">\r\n                                            \r\n数据库的主要特点 <br>\r\n　　(1)实现数据共享。 <br>\r\n　　数据共享包含所有用户可同时存取数据库中的数据，也包括用户可以用各种方式通过接口使用数据库，并提供数据共享。 <br>\r\n　　(2)减少数据的冗余度。 <br>\r\n　　同文件系统相比，由于数据库实现了数据共享，从而避免了用户各自建立应用文件。减少了大量重复数据，减少了数据冗余，维护了数据的一致性。 <br>\r\n　　(3)数据的独立性。 <br>\r\n　　数据的独立性包括数据库中数据库的逻辑结构和应用程序相互独立，也包括数据物理结构的变化不影响数据的逻辑结构。 <br>\r\n　　(4)数据实现集中控制。 <br>\r\n　　文件管理方式中，数据处于一种分散的状态，不同的用户或同一用户在不同处理中其文件之间毫无关系。利用数据库可对数据进行集中控制和管理，并通过数据模型表示各种数据的组织以及数据间的联系。\r\n<br>\r\n　　(5)数据一致性和可维护性，以确保数据的安全性和可靠性。 <br><p>　　主要包括：①安全性控制：以防止数据丢失、错误更新和越权使用；</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ②完整性控制：保证数据的正确性、有效性和相容性；</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ③并发控制：使在同一时间周期内，允许对数据实现多路存取，又能防止用户之间的不正常交互作用；</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ④故障的发现和恢复：由数据库管理系统提供一套方法，可及时发现故障和修复故障，从而防止数据被破坏 </p>\r\n　　(6)故障恢复。 <br>\r\n　　由数据库管理系统提供一套方法，可及时发现故障和修复故障，从而防止数据被破坏。数据库系统能尽快恢复数据库系统运行时出现的故障，可能是物理上或是逻辑上的错误。比如对系统的误操作造成的数据错误等。\r\n<br><br>                                    </div>', '2019-06-30 17:17:03', '1', '5', '50');
INSERT INTO `post` VALUES ('11', '2', '1', '关于操作系统的考研题 ', '<div class=\"post_body post_body_min_h\">\r\n          小弟有一道关于操作系统的考研题，希望大神们可以详细解答一下<br>\r\n假设文件位于使用1K块大小的文件系统上。此文件使用i-nodes在磁盘上维护，这在许多UNIX文件系统上是典型的。<br>\r\n假设有七个直接指针，然后是一个一级间接块指针，一个二级间接块指针，以及一个三级间接块指针。假设一个程序在这个文件系统中创建并打开一个文件，然后寻找以下位置，写一个字符，然后退出。确定必须分配多少磁盘块（数据和间接块）来存储文件的数据。<br>\r\n1.寻求9000<br>\r\n2.寻求300000<br>\r\n3.寻求67,000,000<br>\r\n文件需要多大才能要求三重间接指针？<br>\r\n对于本题，你正在打开（创建）新文件，而不是现有文件。需要使用问题中的条件计算创建在指定位置写入字符的3个文件中的每个文件所需的磁盘空间量。\r\n\r\n\r\n          <div marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" width=\"100%\">\r\n              <div>\r\n                <div id=\"kp_box_87\" data-pid=\"87\" data-track-click=\"{&quot;mod&quot;:&quot;kp_popu_87-112&quot;,&quot;con&quot;:&quot;,,&quot;}\"><div class=\"placeholder\">\r\n<script type=\"text/javascript\" src=\"http://static.mediav.com/js/mvf_news_feed.js\"></script>\r\n            <div class=\"mediav_ad\"><newsfeed class=\"newsfeed QIHOO__WEB__SO__1562749030116_404\" id=\"QIHOO__WEB__SO__1562749030116_404\" style=\"display: block; margin: 0px; padding: 0px; border: none; width: 600px; height: auto; overflow: hidden; position: relative; text-align: left; font-size: 18.4615px;\"><info-div id=\"QIHOO__WEB__SO__1562749030116_404-info\" style=\"zoom:1\"><info-div class=\"QIHOO__WEB__SO__1562749030116_404 largeImage item-box clk\" data-href=\"https://s2.nzbdw.com/s?type=2&amp;r=20&amp;mv_ref=bbs.csdn.net&amp;enup=CAABK/cEMwgAAjME9ysA&amp;mvid=MjM5NjQ4NjAyMjczOTEyMjEwNTAwMTg&amp;bid=13753b996a61a82b&amp;price=AAAAAF0lqGUAAAAAAAZNg/o/5acY+7DVnwMYFg==&amp;finfo=DAABCAABAAAB9QgAAgAAAIUEAAM/bU5rUGKtPAAIAAIAAAADCgADNID4u3nkpMYIAAQAAACMBgAGLbcGAAoAAAYADD9cCAAOAAAAPwoADwAAAAAATHJQAA&amp;ugi=FcTgigEVyNtrTBUCFcoEFcoEFQAAFYivh/4OFsAIFcgBFoCN+cv708YFHBbNrrbO2PbwynAVAAAA&amp;uai=FYD2kQIlAhUEFt7IjcPk6PeAaRXyCCXNpdnvDRQCFQAVGhQAHBa6tubmqpDfpdcBFQAAAA&amp;ubi=FfjaWRWGu+ICFYyarhgVwMmIWxUEFRwWkI3msxcW3siiqu6u/IBpNAIWsOCQgAglBhX58aG8DRWuARUANt6b9OSwpvv9RwA&amp;clickid=0&amp;cpx=__OFFSET_X__&amp;cpy=__OFFSET_Y__&amp;cs=__EVENT_TIME_START__&amp;ce=__EVENT_TIME_END__&amp;csign2=br6LgMdoIa1=&amp;url=http%3A%2F%2Fz1.maxtomax.cn\" data-clk=\"https://max-l.mediav.com/rtb?type=3&amp;ver=1&amp;v=CGQSEDEzNzUzYjk5NmE2MWE4MmIYgPuIASCisEUoAWIXMjM5NjQ4NjAyMjczOTEyMjEwNTAwMThwAA&amp;k=Ky9cXwAAAAA=&amp;i=c0rcj81M_Ah6&amp;exp=BQBECQBEAQJEEABDJABD&amp;x=__OFFSET_X__&amp;y=__OFFSET_Y__&amp;st=__EVENT_TIME_START__&amp;et=__EVENT_TIME_END__&amp;adw=__ADSPACE_W__&amp;adh=__ADSPACE_H__&amp;tc=&amp;turl=\">\r\n    <info-div class=\"largeImage-wrapper visited\">\r\n        <info-div class=\"largeImage-body\">\r\n            <info-div class=\"largeImage-title\">教你新的方法，手机学习，每天赚800，轻松月入2-3w!</info-div>\r\n            <info-div class=\"largeImage-grid-wrap\">\r\n                <info-div class=\"img\" style=\"background-image:url(https://s3m.nzwgs.com/galileo/734908-90b5afd7b5bdae24528c6ceff976b9ac.jpg);\">\r\n                    <info-div class=\"ads-tag\"></info-div>\r\n                </info-div>\r\n            </info-div>\r\n            <info-div class=\"largeImage-extra\">\r\n                <info-div class=\"largeImage-ad-tag\">广告</info-div>\r\n                <info-div class=\"largeImage-ad-src\">硕强 · 猎媒</info-div>\r\n            </info-div>\r\n        </info-div>\r\n    </info-div>\r\n</info-div>\r\n</info-div></newsfeed></div>\r\n            <script type=\"text/javascript\">\r\n            NEWS_FEED({\r\n                w:600,//必须大于300\r\n                showid : \'0UvTI1\',\r\n                placeholderId : \'placeholder\',//容器ID\r\n                fId : \'\',//信息流容器ID\r\n                inject : \'cads\'\r\n            })\r\n                        </script>\r\n </div></div>\r\n              </div>\r\n          </div>\r\n        <!-- <div class=\"question_wrap\"><span>问题点数：</span><em>分</em></div> -->\r\n      </div>', '2019-07-10 17:07:07', '0', '5', '8');
INSERT INTO `post` VALUES ('12', '2', '1', '初学操作系统，对于fork（）函数有多处不理解，拜求大家赐教', '<div class=\"post_body post_body_min_h\">\r\n          先举个最简单的实例<br>\r\n#include&lt;stdio.h&gt;<br>\r\nmain(){<br>\r\n	printf(\"公共程序段\");<br>\r\n<br>\r\n	int&nbsp;p1=fork();<br>\r\n	if(p1==0)<br>\r\n		printf(\"子程序段\");<br>\r\n	else<br>\r\n		printf(\"父程序段\");<br>\r\n}<br>\r\n大家都知道，fork函数在此处有个现象，就是执行一次，返回两次。<br>\r\n<br>\r\n在这里我起初对于如何实现执行一次，返回两次有疑问，既然子进程中有fork这段代码，那就应该是执行两次，返回两次，也就是说子进程会再通过fork创建自己的子进程，如此循环往复，直到达到系统的进程表的上限。<br>\r\n<br>\r\n后来，我通过查阅资料，对这个机制有了进一步理解。<br>\r\n进程映像分为三部分：可执行程序、数据、和进程控制块中的上下文等信息。而操作系统为了实现多进程并发执行，就采用一系列调度算法，进程就不得不在执行过程中断断续续，进程在让出CPU后等待一段时间再一次轮到自己执行时，系统必须知晓它上次停下之前执行到哪里了，记录这个信息并不难，因为程序在运行时有个寄存器，大概叫程序寄存器记录了下一条要执行的指令所在的地址，所有在程序不得不停下让出时间片时，系统就把那个程序寄存器中的地址记录到进程页中，下一次再轮到那个进程执行时不至于把那个进程从头开始执行，而是从上次停下的地方执行。<br>\r\n<br>\r\n那么再回到进程创建的问题。<br>\r\n我例子中的程序，执行到int&nbsp;p1=fork()的时候，我理解中是fork内部可以宏观的分为两部分：1、创建子进程;2、返回所创建的进程的进程号。<br>\r\n当父进程执行到fork内部的第一部分时，即创建了进程，但是尚未返回子进程的进程号时，进程控制块中一直都实时记录这进程运行到了哪里，当然此时的记录是“该进程运行到了fork函数的第一层，尚未返回”。这里问题的关键出来了，子进程是按照父进程的模板刻画的，它现在已经在进程页表里面了，下一步就轮到它执行了，最精彩的部分开始出现了，它的页表项信息中居然记录这这样一条信息“该进程已经运行到fork函数的第一层，尚未返回”，所以，当时间片轮到子进程的时候，它直接就按照记录执行下一步，既然fork的创建工作已经执行了，那我就直接返回。通俗的说，子进程不是从头开始执行程序的代码段，而是从“fork函数返回”这里开始执行的，这样子就可以解释为什么fork函数只执行一次，而返回两次，因为在子进程中它没有执行创建子进程的工作，而是直接返回了0。<br>\r\n<br>\r\n<br>\r\n但是，新的问题又出现了，如果按照我上述那么理解，那么子进程就不会执行公共程序段printf(\"公共程序段\");<br>\r\n所以我上面的理解一定是错误的，或者有相当大的问题的，请大侠们指正，只需回答我三个疑点：<br>\r\n一、为什么子进程中的fork不会再创建新的进程<br>\r\n（如果你的回答是fork执行一次，返回两次，那么请看下面问题）<br>\r\n二、fork为什么会执行一次，返回两次呢，这是什么机制实现的\r\n\r\n\r\n          <div marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" width=\"100%\">\r\n              <div>\r\n                <div id=\"kp_box_87\" data-pid=\"87\" data-track-click=\"{&quot;mod&quot;:&quot;kp_popu_87-112&quot;,&quot;con&quot;:&quot;,,&quot;}\"><div class=\"placeholder\">\r\n<script type=\"text/javascript\" src=\"http://static.mediav.com/js/mvf_news_feed.js\"></script>\r\n            <div class=\"mediav_ad\"><newsfeed class=\"newsfeed QIHOO__WEB__SO__1562750438485_925\" id=\"QIHOO__WEB__SO__1562750438485_925\" style=\"display: block; margin: 0px; padding: 0px; border: none; width: 600px; height: auto; overflow: hidden; position: relative; text-align: left; font-size: 18.4615px;\"><info-div id=\"QIHOO__WEB__SO__1562750438485_925-info\" style=\"zoom:1\"><info-div class=\"QIHOO__WEB__SO__1562750438485_925 largeImage item-box clk\" data-href=\"https://g1.milkjpg.com/s?type=2&amp;r=20&amp;mv_ref=bbs.csdn.net&amp;enup=CAABK/cEMwgAAjME9ysA&amp;mvid=MjM5NjQ4NjAyMjczOTEyMjEwNTAwMTg&amp;bid=13753cf96b675b39&amp;price=AAAAAF0lreUAAAAAAAvG2nR5rz46RIjLzOFC1Q==&amp;finfo=DAABCAABAAACjQgAAgAAAEYEAAM/gpBOLMS9FQAIAAIAAAADCgADZhAaClNHXa8IAAQAAABIBgAGLbcGAAoAAAYADD9cCgAPAAAAAABjo9AA&amp;ugi=FcTgigEVyNtrTBUCFcoEFcoEFQAAFaLgm/EEFoAIFcgBFoCN3IqG1MYFHBbhjMzO1LXfpF0VAAAA&amp;uai=FYD2kQIlAhUEFv7X0PHEvIiQzAEV8ggl8om24AYUAhUAFRoUABwWy7bi64yAsZfGARUAAAA&amp;ubi=FdbPUxWKidgCFZii9xcVxPniWhUEFRwW8r3npBcW/tfl2M6CjZDMATQCFrDgkIAIJQYV1vXt/QsVrgEVADbR+/CD/vyWrkoA&amp;clickid=0&amp;cpx=__OFFSET_X__&amp;cpy=__OFFSET_Y__&amp;cs=__EVENT_TIME_START__&amp;ce=__EVENT_TIME_END__&amp;csign2=QzWflBYie8G=&amp;url=http%3A%2F%2Fxh3.c2487ux.top%2F\" data-clk=\"https://max-l.mediav.com/rtb?type=3&amp;ver=1&amp;v=CGQSEDEzNzUzY2Y5NmI2NzViMzkYgPuIASCisEUoAWIXMjM5NjQ4NjAyMjczOTEyMjEwNTAwMThwAA&amp;k=cbk+UAAAAAA=&amp;i=gtwyIv12_Ahb&amp;exp=BQBECQBEAwJEEABDJQBD&amp;x=__OFFSET_X__&amp;y=__OFFSET_Y__&amp;st=__EVENT_TIME_START__&amp;et=__EVENT_TIME_END__&amp;adw=__ADSPACE_W__&amp;adh=__ADSPACE_H__&amp;tc=&amp;turl=\">\r\n    <info-div class=\"largeImage-wrapper\">\r\n        <info-div class=\"largeImage-body\">\r\n            <info-div class=\"largeImage-title\">北京空姐大学毕业后玩了半个月这个，银行卡巨款被曝光！</info-div>\r\n            <info-div class=\"largeImage-grid-wrap\">\r\n                <info-div class=\"img\" style=\"background-image:url(https://s3m.milkjpg.com/galileo/685035-e8cb82000ae21caaf1d178d37dd35d91.jpg);\">\r\n                    <info-div class=\"ads-tag\"></info-div>\r\n                </info-div>\r\n            </info-div>\r\n            <info-div class=\"largeImage-extra\">\r\n                <info-div class=\"largeImage-ad-tag\">广告</info-div>\r\n                <info-div class=\"largeImage-ad-src\">俊盛杰 · 猎媒</info-div>\r\n            </info-div>\r\n        </info-div>\r\n    </info-div>\r\n</info-div>\r\n</info-div></newsfeed></div>\r\n            <script type=\"text/javascript\">\r\n            NEWS_FEED({\r\n                w:600,//必须大于300\r\n                showid : \'0UvTI1\',\r\n                placeholderId : \'placeholder\',//容器ID\r\n                fId : \'\',//信息流容器ID\r\n                inject : \'cads\'\r\n            })\r\n                        </script>\r\n </div></div>\r\n              </div>\r\n          </div>\r\n        <!-- <div class=\"question_wrap\"><span>问题点数：</span><em>分</em></div> -->\r\n      </div>', '2019-07-10 17:21:21', '0', '4', '7');
INSERT INTO `post` VALUES ('13', '2', '1', '计算机操作系统', '<div class=\"post_body post_body_min_h\">\r\n          常用调度算法<br>\r\n一、FIFO(先进先出算法):按作业到达时间的先后来决定运行的先后。<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;周转时间Ti=结束时间-到达时间<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;加权周转时间Wi=周转时间/运行时间<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;平均周转时间T=(T1+T2+T3+Ti)/i<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;加权平均周转率W=(W1+W2+W3+Wi)/i<br>\r\n<br>\r\n二、SJF(短作业优先调度算法):从作业后备队列中挑选所需运行时间最短的作业先进入内存运行。<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;计算方式同FIFO算法<br>\r\n<br>\r\n三、HRN(最高响应比优先调度算法):每个作业在调度时都有一个响应比，其数值是动态变化的。<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;动态响应比计算方式:<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;响应比Rp=(1+等待时间/运行时间)<br>\r\n<br>\r\n四、RR(时间片轮转算法):系统将所有就绪进程按先来先服务的原则排成一个队列，每次调度时把CPU分配给队首进程，并让它执行一个时间片。<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;平均周转率W=(W1+W2+Wi)/i<br>\r\n<br>\r\n五、优先级调度算法:给每个进程规定一个优先级，调度时选择优先级高的进程或作业。<br>\r\n<br>\r\n<br>\r\n<br>\r\n<br>\r\n前三种为非抢先方式，后两种为抢先方式。<br>\r\n<br>\r\n\r\n\r\n\r\n          <div marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" width=\"100%\">\r\n              <div>\r\n                <div id=\"kp_box_87\" data-pid=\"87\" data-track-click=\"{&quot;mod&quot;:&quot;kp_popu_87-112&quot;,&quot;con&quot;:&quot;,,&quot;}\"><div class=\"placeholder\">\r\n<script type=\"text/javascript\" src=\"http://static.mediav.com/js/mvf_news_feed.js\"></script>\r\n            <div class=\"mediav_ad\"><newsfeed class=\"newsfeed QIHOO__WEB__SO__1562755049187_346\" id=\"QIHOO__WEB__SO__1562755049187_346\" style=\"display: block; margin: 0px; padding: 0px; border: none; width: 600px; height: auto; overflow: hidden; position: relative; text-align: left; font-size: 18.4615px;\"><info-div id=\"QIHOO__WEB__SO__1562755049187_346-info\" style=\"zoom:1\"><info-div class=\"QIHOO__WEB__SO__1562755049187_346 singleImage clk\" data-href=\"https://ssxd.mediav.com/s?type=2&amp;r=20&amp;mv_ref=bbs.csdn.net&amp;enup=CAABai9jDggAAg5jL2oA&amp;mvid=MjM5NjQ4NjAyMjczOTEyMjEwNTAwMTg&amp;bid=1375417a27646ab2&amp;price=AAAAAF0lv+gAAAAAAAmGwjoBcNHf91x7bCt6Nw==&amp;finfo=DAABCAABAAACEggAAgAAAEoEAAM/e86jdAXfWwAIAAIAAAADCgADUmMHrEl3UbYIAAQAAABOBgAGLbcGAAoAAAgADgAAAD8KAA8AAAAAAFDfIAA&amp;ugi=FcTgigEVyNtrTBUCFcoEFcoEFQAAFdaAsN0EJcgBFoCojrio1MYFHBbjyM736K/QlvIBFQAAAA&amp;uai=FYD2kQIlAhUEFp6ZzvGRpf/ipAEV8gglroeW0g4UAhUAFRoUABwWmuuGy4mGweciFQAAAA&amp;ubi=FZKvWhWA8uMCFb6WthgV2qKWWxUEFRwW7L7otBcWnpnj2Jvrg+OkATQCFqjgECUGFaHrm/QMFfoFFQA29Kb/sOWFn7kEAA&amp;clickid=0&amp;cpx=__OFFSET_X__&amp;cpy=__OFFSET_Y__&amp;cs=__EVENT_TIME_START__&amp;ce=__EVENT_TIME_END__&amp;csign2=x4LEmcTAXnU=&amp;url=http%3A%2F%2Fgp.jyfengli.cn%2F\" data-clk=\"https://max-l.mediav.com/rtb?type=3&amp;ver=1&amp;v=CGQSEDEzNzU0MTdhMjc2NDZhYjIYgPuIASCisEUoAWIXMjM5NjQ4NjAyMjczOTEyMjEwNTAwMThwAA&amp;k=BmVmXQAAAAA=&amp;i=Yx80ZqFJ_A3A&amp;exp=BQBECgBEEABDJQBD&amp;x=__OFFSET_X__&amp;y=__OFFSET_Y__&amp;st=__EVENT_TIME_START__&amp;et=__EVENT_TIME_END__&amp;adw=__ADSPACE_W__&amp;adh=__ADSPACE_H__&amp;tc=&amp;turl=\">\r\n    <info-div class=\"wrap\">\r\n        <info-div class=\"singleImage-img singleImage-img-left\">\r\n            <info-div class=\"img\" style=\"background-image:url(https://s3m.mediav.com/pictogif/7ee701c769390c40f0347c2695923440_180x100_2_40_1.gif)\"><info-div class=\"ads-tag\"></info-div></info-div>\r\n        </info-div>\r\n        <info-div class=\"singleImage-body singleImage-body-left\">\r\n            <info-div class=\"singleImage-title\">一位亏损百万老股民的深刻总结：不想亏钱的，务必死守“七不买三不卖”</info-div>\r\n            <info-div class=\"singleImage-desc\">股管家 · 顶新</info-div>\r\n        </info-div>\r\n   </info-div>\r\n   <info-div style=\"clear:both;\"></info-div>\r\n</info-div>\r\n</info-div></newsfeed></div>\r\n            <script type=\"text/javascript\">\r\n            NEWS_FEED({\r\n                w:600,//必须大于300\r\n                showid : \'0UvTI1\',\r\n                placeholderId : \'placeholder\',//容器ID\r\n                fId : \'\',//信息流容器ID\r\n                inject : \'cads\'\r\n            })\r\n                        </script>\r\n </div></div>\r\n              </div>\r\n          </div>\r\n        <!-- <div class=\"question_wrap\"><span>问题点数：</span><em>分</em></div> -->\r\n      </div>', '2019-07-10 19:03:39', '0', '1', '8');
INSERT INTO `post` VALUES ('14', '2', '1', '原始的操作系统是怎样开发出来的?', '<div class=\"post_body post_body_min_h\">\r\n          那个...&nbsp;<br>\r\n问个问题...这个问题我一直就没想通过...&nbsp;<br>\r\n就是...&nbsp;<br>\r\n<br>\r\n<span style=\"font-size: 16px;\"><span style=\"color: #FF0000;\"><br>\r\n操作系统到底是怎样写出来的啊?或者说最原始的操作系统是怎样开发出来的?&nbsp;(限80X86体系)&nbsp;<br>\r\n现在我们有高级语言工具(比如VC++,Delphi,VB等),我们可以用它们开发出基于某个操作系统的应用程序,甚至是操作系统,&nbsp;<br>\r\n而在没有这些工具的时候操作系统又是用什么东西怎样开发出来的呢?&nbsp;<br>\r\n<br>\r\n如果说是用汇编,好吧,用汇编,但那还是得有编译器吧?&nbsp;<br>\r\n而裸机,没有操作系统怎么运行编译器呢?&nbsp;<br>\r\n</span></span><br>\r\n&nbsp;&nbsp;<br>\r\n<br>\r\n<br>\r\n到底是怎样个过程啊?&nbsp;<br>\r\n我已经绕昏了...&nbsp;<br>\r\n拜托各位高人给点指引,我想不通心头很不爽啊...&nbsp;<br>\r\n有满意答复再加100分寥表谢意!!!&nbsp;<br>\r\n\r\n\r\n\r\n          <div marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" width=\"100%\">\r\n              <div>\r\n                <div id=\"kp_box_87\" data-pid=\"87\" data-track-click=\"{&quot;mod&quot;:&quot;kp_popu_87-112&quot;,&quot;con&quot;:&quot;,,&quot;}\"><div class=\"placeholder\">\r\n<script type=\"text/javascript\" src=\"http://static.mediav.com/js/mvf_news_feed.js\"></script>\r\n            <div class=\"mediav_ad\"><newsfeed class=\"newsfeed QIHOO__WEB__SO__1562756718178_267\" id=\"QIHOO__WEB__SO__1562756718178_267\" style=\"display: block; margin: 0px; padding: 0px; border: none; width: 600px; height: auto; overflow: hidden; position: relative; text-align: left; font-size: 18.4615px;\"><info-div id=\"QIHOO__WEB__SO__1562756718178_267-info\" style=\"zoom:1\"><info-div class=\"QIHOO__WEB__SO__1562756718178_267 largeImage item-box clk\" data-href=\"https://s2.nzbdw.com/s?type=2&amp;r=20&amp;mv_ref=bbs.csdn.net&amp;enup=CAABai9jDggAAg5jL2oA&amp;mvid=MjM5NjQ4NjAyMjczOTEyMjEwNTAwMTg&amp;bid=1375431b4e31d406&amp;price=AAAAAF0lxm0AAAAAAAcZdEnIpEL7jQglGu9URQ==&amp;finfo=DAABCAABAAABwwgAAgAAAEEEAAM/eUi7JSQSXgAIAAIAAAADCgADPTQ9JtTGZ9wIAAQAAABJBgAGLbcGAAoAAAYADD9cCAAOAAAAPwoADwAAAAAARNEwAA&amp;ugi=FcTgigEVyNtrTBUCFcoEFcoEFQAAFa7x/rAOJcgBFoDV5e+01MYFHBbju9Pc9ffZ7QMVAAAA&amp;uai=FYD2kQIlAhUEFr7p8fXNg5q0ehXyCCXajurWBRQCFQAVGhQAHBalnqP1rI+V3gEVAAAA&amp;ubi=FZK1VBXQ3NUCFYjX6xcVlMXsWRUEFRwWiMympxcWvumG3dfJnrR6NAIWsOCQgAglBhXHiozhAhWuARUANv2Wifi52JLwawA&amp;clickid=0&amp;cpx=__OFFSET_X__&amp;cpy=__OFFSET_Y__&amp;cs=__EVENT_TIME_START__&amp;ce=__EVENT_TIME_END__&amp;csign2=J_tedRCbW_U=&amp;url=http%3A%2F%2Fww.gszdo.cn\" data-clk=\"https://max-l.mediav.com/rtb?type=3&amp;ver=1&amp;v=CGQSEDEzNzU0MzFiNGUzMWQ0MDYYgPuIASCisEUoAWIXMjM5NjQ4NjAyMjczOTEyMjEwNTAwMThwAA&amp;k=fWq8oQAAAAA=&amp;i=J7DZAAHP_Ag7&amp;exp=BQBECgBEEQBDIwBD&amp;x=__OFFSET_X__&amp;y=__OFFSET_Y__&amp;st=__EVENT_TIME_START__&amp;et=__EVENT_TIME_END__&amp;adw=__ADSPACE_W__&amp;adh=__ADSPACE_H__&amp;tc=&amp;turl=\">\r\n    <info-div class=\"largeImage-wrapper\">\r\n        <info-div class=\"largeImage-body\">\r\n            <info-div class=\"largeImage-title\">附近4名女子玩手机刷出巨额财富，每人拿到100w+！方法曝光！</info-div>\r\n            <info-div class=\"largeImage-grid-wrap\">\r\n                <info-div class=\"img\" style=\"background-image:url(https://s3m.nzwgs.com/galileo/691529-f53888b224eb79c985b6b6162eefe140.jpg);\">\r\n                    <info-div class=\"ads-tag\"></info-div>\r\n                </info-div>\r\n            </info-div>\r\n            <info-div class=\"largeImage-extra\">\r\n                <info-div class=\"largeImage-ad-tag\">广告</info-div>\r\n                <info-div class=\"largeImage-ad-src\">前海造人教育 · 猎媒</info-div>\r\n            </info-div>\r\n        </info-div>\r\n    </info-div>\r\n</info-div>\r\n</info-div></newsfeed></div>\r\n            <script type=\"text/javascript\">\r\n            NEWS_FEED({\r\n                w:600,//必须大于300\r\n                showid : \'0UvTI1\',\r\n                placeholderId : \'placeholder\',//容器ID\r\n                fId : \'\',//信息流容器ID\r\n                inject : \'cads\'\r\n            })\r\n                        </script>\r\n </div></div>\r\n              </div>\r\n          </div>\r\n        <!-- <div class=\"question_wrap\"><span>问题点数：</span><em>分</em></div> -->\r\n      </div>', '2019-07-10 19:05:54', '0', '5', '13');
INSERT INTO `post` VALUES ('15', '2', '1', '中国软件必须迈过操作系统这道坎!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!(推荐)', '<div class=\"post_body post_body_min_h\">\r\n          &nbsp;&nbsp;在去年底国务院发布促进软件产业发展的18号文件后，全国各地纷纷建立软件科技园区和配套的优惠政策，软件产业呈现出一派生机勃勃的景象。今年5月，用友软件公司在上海证券交易所上市，成功地创下了第二支过百元股票的纪录，使软件产业发展的热潮达到了沸点。人们似乎看到，中国的软件产业已经摆脱困境，走上了康庄大道。&nbsp;&nbsp;<br>\r\n<br>\r\n然而，人们没有注意到，中国软件业的发展还存在着重大的缺陷：我们的操作系统，几乎都是微软、IBM等几家外国公司的产品。金山、用友、东大阿尔派等国内软件业的主力军所开发的应用软件，是依托在这几家外国公司的操作系统之上的。中国的软件产业，建立在一片自己都不清楚深浅的“沙滩”之上。&nbsp;&nbsp;<br>\r\n<br>\r\n操作系统安全问题严重&nbsp;&nbsp;<br>\r\n<br>\r\n美国利用高科技手段大规模地获取他国的政治、军事、经济情报由来已久。今年3月，“梯队”监听站事件曝光后，欧洲各国才发现，美国在24小时监视着欧洲上空和网络上的所有通信。&nbsp;&nbsp;<br>\r\n<br>\r\n操作系统在计算机系统中起着调度中心的作用，所有的信息都是通过操作系统来进行处理和传送的。如果操作系统不安全，网络或其他的安全防范措施即便再严密也是不安全的。国家信息安全测评中心主任吴世忠研究员告诉记者：“现在大家谈论得较多的是网络安全，网络是管传输的，操作系统是计算机系统的调度中心，如果操作系统不安全，就像是家里出了内贼，在外面筑再高再厚的墙也没有用。”&nbsp;&nbsp;<br>\r\n<br>\r\n微软公司的视窗操作系统在中国的装机量最大，暴露出来的安全问题也最多。&nbsp;&nbsp;<br>\r\n<br>\r\n1996年，澳大利亚海军发现了视窗95操作系统会悄悄向微软发送电脑中的信息。&nbsp;&nbsp;<br>\r\n<br>\r\n在以后的几年中，微软视窗操作系统中的一些安全问题被先后曝光，而这些问题，尤以视窗98的安全后门为甚。微软公司的处理方式是一边否认自己有任何不良企图，声称只是个“失误”，一边在后续的新版本中关闭了这一后门。&nbsp;&nbsp;<br>\r\n<br>\r\n1999年，一位名叫费尔南德斯的计算机专家发现了微软在视窗2000操作系统中隐藏的秘密后门——NSA“密钥”。费尔南德斯说：“在数据安全行业中，（NSA）这三个字母的组合只能有一个意思：美国国家安全局。”通过该密钥，美国国家安全局可以使用户的加密形同虚设。微软公司对此问题一直没有作出令用户满意的答复。&nbsp;&nbsp;<br>\r\n<br>\r\n按照美国的法律，所有的操作系统源代码都必须向美国国家安全局公开。而这些源代码，无论是微软也好，还是IBM也好，对用户是不公开的。5月初，在用户多年呼吁的压力下，微软宣布向12个国家的部分用户公开部分视窗操作系统的外围源代码。微软中国公司的发言人证实，这12个国家中没有中国。&nbsp;&nbsp;<br>\r\n<br>\r\n中国需要Linux&nbsp;&nbsp;<br>\r\n<br>\r\n基于对公开源代码的迫切需求，国际上近几年来掀起了一场使用公开源代码的操作系统——Linux的运动。这场运动现在已经星火燎原，成为当今世界软件业发展的方向。&nbsp;&nbsp;<br>\r\n<br>\r\n今年初，IDC发布了一份市场调查报告。报告指出，Li－nux发货量的增长速度已经超过微软的视窗操作系统。微软首席执行官SteveBallmer承认，Linux已经成为微软的头号敌人。&nbsp;&nbsp;<br>\r\n<br>\r\n科技部高新技术发展及产业化司信息处李武强处长说：“我是支持发展Linux的。Linux公开源代码，操作系统里到底藏着什么？公开之后，大家都放心。而对于视窗，人家知道里边有什么，我们却什么都不知道。”&nbsp;&nbsp;<br>\r\n<br>\r\n至于Linux在涉密部门的应用，有人担心公开源代码不好。李武强认为这并不是问题，“我们可以对核心部分进行安全加固。”&nbsp;&nbsp;<br>\r\n<br>\r\n正因为如此，Linux在中国得到了快速的发展，目前走在前列的有红旗Linux、冲浪Linux、TurboLinux等，其中实力最强的是中科院所属的中科红旗软件公司。&nbsp;&nbsp;<br>\r\n<br>\r\n今年3月，信息产业部注资中科红旗公司。曲维枝副部长称，其目的在于将中科红旗打造成为中国Linux产业的巨型企业，进而推动整个民族软件产业和信息工业的发展。&nbsp;&nbsp;<br>\r\n<br>\r\n中科红旗是在中科院软件所长期研究操作系统的技术基础上，以及中科院的两位副院长严义埙和杨柏龄的直接支持下发展起来的。&nbsp;&nbsp;<br>\r\n<br>\r\n据了解，中科红旗目前已经获得了包括IBM、HP、长城、方正、浪潮等国内领先的服务器厂商的认可，并签订了超过100万套的OEM合约。北京市政府在经过严格测试后已经把红旗公司的Linux服务器选作政府采购的指定产品。军队方面对于中科红旗的产品也给予了高度重视。&nbsp;&nbsp;<br>\r\n<br>\r\nLinux需要真正的公平竞争环境&nbsp;&nbsp;<br>\r\n<br>\r\nLinux的发展需要国家的支持，对Linux的发展，应该直接体现在市场上。完全把Linux放到市场上自生自灭，难以抵御国外软件大公司的打击。据记者了解，国外大软件公司最喜欢听的就是“公平竞争”——把一个初生儿和一个腰圆臂粗的壮汉放在一起的“公平”较量。在这方面，我国的软件公司东方通科技感触良多。&nbsp;&nbsp;<br>\r\n<br>\r\n与竞争对手——年收入约10亿美元的美国BEA公司比起来，东方通科技公司小得不成比例。BEA的同类产品售价比东方通高10倍左右，1999年，BE－A以300万元人民币的低报价获得南方某省建行系统的定单，而在规模上与该省大致相等的广东省，由于没有东方通的竞争，BEA的报价竟高达128万美元。在这样的“公平竞争”中，中国的东方通自然要败下阵来。&nbsp;&nbsp;<br>\r\n<br>\r\n据北京市科委副主任俞慈声介绍，世界各国在软件业的发展上并不完全是市场竞争，软件业并不是一个完全竞争的市场。在韩国、日本等国家，政府规定了在采购中要保证一定量的国产软件，因此，这两个国家的软件业都发展了起来。韩国的办公软件约占市场的20％，日本的更高，占到了约50％。&nbsp;&nbsp;<br>\r\n<br>\r\n科技部的李武强处长认为，操作系统不完全是一个技术问题或市场问题。国外也有不少优秀的操作系统，例如OS／2、苹果，在与微软的竞争中都失败了，并不是技术不行。中国的软件企业还小，承担不起太大的风险。&nbsp;&nbsp;<br>\r\n<br>\r\n李武强认为，让企业来完全承担这些风险是不应该的。政府应该为Linux的发展创造良好的环境。他表示在“十五”期间的“863”计划中，将考虑列入Linux的支持项目。&nbsp;&nbsp;<br>\r\n<br>\r\n俞慈声认为，政府可以在政府采购中体现对本国软件业的支持，她说：“这并不违反WTO的要求。政府花的是本国纳税人的钱，用来回馈纳税人，符合国际惯例。美国也是这样做的。”&nbsp;&nbsp;<br>\r\n<br>\r\n文章出处：千龙网&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;作者：杨　谷&nbsp;\r\n\r\n\r\n          <div marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" width=\"100%\">\r\n              <div>\r\n                <div id=\"kp_box_87\" data-pid=\"87\" data-track-click=\"{&quot;mod&quot;:&quot;kp_popu_87-112&quot;,&quot;con&quot;:&quot;,,&quot;}\"><div class=\"placeholder\">\r\n<script type=\"text/javascript\" src=\"http://static.mediav.com/js/mvf_news_feed.js\"></script>\r\n            <div class=\"mediav_ad\"><newsfeed class=\"newsfeed QIHOO__WEB__SO__1562756893977_82\" id=\"QIHOO__WEB__SO__1562756893977_82\" style=\"display: block; margin: 0px; padding: 0px; border: none; width: 600px; height: auto; overflow: hidden; position: relative; text-align: left; font-size: 18.4615px;\"><info-div id=\"QIHOO__WEB__SO__1562756893977_82-info\" style=\"zoom:1\"><info-div class=\"QIHOO__WEB__SO__1562756893977_82 singleImage clk\" data-href=\"https://ssxd.mediav.com/s?type=2&amp;r=20&amp;mv_ref=bbs.csdn.net&amp;enup=CAABai9jDggAAg5jL2oA&amp;mvid=MjM5NjQ4NjAyMjczOTEyMjEwNTAwMTg&amp;bid=1375434773bb2509&amp;price=AAAAAF0lxx0AAAAAAAR8TLygBcLdb8LmvU3rkw==&amp;finfo=DAABCAABAAAB1QgAAgAAAEQEAAM/ewnBrwCgVgAIAAIAAAADCgADIHWJ3jDx0SIIAAQAAABHBgAGLbcGAAoAAAgADgAAAD8KAA8AAAAAAEeQUAA&amp;ugi=FcTgigEVyNtrTBUCFcoEFcoEFQAAFZWzu8UBJcgBFoCF0pe21MYFHBa0tobnvtCTpA8VAAAA&amp;uai=FYD2kQIlAhUEFr70lq7OscD1QBXyCCX9l53hDhQCFQAVGhQAHBaa64bLiYbB5yIVAAAA&amp;ubi=FZ66WhWOi+QCFb6btxgV4M6XWxUEFRwW0tnytBcWvvSrldj3xPVANAIWsMAQJQYV57CG/gYV+gUVADbU/s/5oLLQ9BwA&amp;clickid=0&amp;cpx=__OFFSET_X__&amp;cpy=__OFFSET_Y__&amp;cs=__EVENT_TIME_START__&amp;ce=__EVENT_TIME_END__&amp;csign2=Lt8aoD3seoI=&amp;url=http%3A%2F%2Fgp5.9xsq.cn\" data-clk=\"https://max-l.mediav.com/rtb?type=3&amp;ver=1&amp;v=CGQSEDEzNzU0MzQ3NzNiYjI1MDkYgPuIASCisEUoAWIXMjM5NjQ4NjAyMjczOTEyMjEwNTAwMThwAA&amp;k=TAF/bAAAAAA=&amp;i=bAawz-_P_A32&amp;exp=BQBECQBEEABDJQBD&amp;x=__OFFSET_X__&amp;y=__OFFSET_Y__&amp;st=__EVENT_TIME_START__&amp;et=__EVENT_TIME_END__&amp;adw=__ADSPACE_W__&amp;adh=__ADSPACE_H__&amp;tc=&amp;turl=\">\r\n    <info-div class=\"wrap\">\r\n        <info-div class=\"singleImage-img singleImage-img-left\">\r\n            <info-div class=\"img\" style=\"background-image:url(https://s3m.mediav.com/galileo/741007-ef488f9ad813f19f1c4f6e7c8102b9f0.jpg)\"><info-div class=\"ads-tag\"></info-div></info-div>\r\n        </info-div>\r\n        <info-div class=\"singleImage-body singleImage-body-left\">\r\n            <info-div class=\"singleImage-title\">股神徐翔狱中曝出庄家洗盘规律，牢记这3点，A股就是提款机</info-div>\r\n            <info-div class=\"singleImage-desc\">股管家 · 顶新</info-div>\r\n        </info-div>\r\n   </info-div>\r\n   <info-div style=\"clear:both;\"></info-div>\r\n</info-div>\r\n</info-div></newsfeed></div>\r\n            <script type=\"text/javascript\">\r\n            NEWS_FEED({\r\n                w:600,//必须大于300\r\n                showid : \'0UvTI1\',\r\n                placeholderId : \'placeholder\',//容器ID\r\n                fId : \'\',//信息流容器ID\r\n                inject : \'cads\'\r\n            })\r\n                        </script>\r\n </div></div>\r\n              </div>\r\n          </div>\r\n        <!-- <div class=\"question_wrap\"><span>问题点数：</span><em>分</em></div> -->\r\n      </div>', '2019-07-10 19:08:53', '0', '5', '22');
INSERT INTO `post` VALUES ('16', '2', '1', ' iphone开发技术要学习的内容', '<div class=\"post_body post_body_min_h\">\r\n          　　一.iOS基础<br>\r\n<br>\r\n　　1&nbsp;开发环境搭建以及IOS组件、框架的概要介绍。<br>\r\n<br>\r\n　　2&nbsp;mac操作系统与iOS操作系统<br>\r\n<br>\r\n　　3&nbsp;xcode&nbsp;IDE开发环境的初始<br>\r\n<br>\r\n　　二.C语言基础<br>\r\n<br>\r\n　　1数据类型、表达式与控制流程语句<br>\r\n<br>\r\n　　2数组、函数与编译预处理<br>\r\n<br>\r\n　　3&nbsp;详解指针<br>\r\n<br>\r\n　　4&nbsp;结构体、联合体<br>\r\n<br>\r\n　　三.OC语言<br>\r\n<br>\r\n　　1、类、对象和方法<br>\r\n<br>\r\n　　2、封装、继承、多态<br>\r\n<br>\r\n　　3、类的扩展<br>\r\n<br>\r\n　　4、Foundation框架<br>\r\n<br>\r\n　　5、内存管理<br>\r\n<br>\r\n　　6、复制对象与归档<br>\r\n<br>\r\n　　7、文件管理<br>\r\n<br>\r\n　　8、kvc、kvo与谓词<br>\r\n<br>\r\n　　2、iPhone入门部分<br>\r\n<br>\r\n　　四.iPhone开发入门<br>\r\n<br>\r\n　　1、视图与窗口(UIView、UIWindow)<br>\r\n<br>\r\n　　2、常用UI控件<br>\r\n<br>\r\n　　3、视图控制器<br>\r\n<br>\r\n　　4、导航控制器<br>\r\n<br>\r\n　　5、分栏控制器<br>\r\n<br>\r\n　　五.iPhone进阶部分<br>\r\n<br>\r\n　　1、表视图1(UITableView)<br>\r\n<br>\r\n　　2、表视图2(UITableViewController)<br>\r\n<br>\r\n　　3、手势与触摸<br>\r\n<br>\r\n　　4、UIScrollView的使用<br>\r\n<br>\r\n　　本部分主要介绍UIButton、UILabel、UITextField、UIActionsheet、UIAlert、UITextView、UIView、UISwitch、UISegmentControl、UIViewcontroller、UITabBarController、UITableview、UINavigationController、UIScrollview、UITouch触摸等控件<br>\r\n<br>\r\n　　5、Block语法的使用<br>\r\n<br>\r\n　　6、UIPickerView使用<br>\r\n<br>\r\n　　7、iPad开发<br>\r\n<br>\r\n　　8、iOS动画<br>\r\n<br>\r\n　　9、音频与视频<br>\r\n<br>\r\n　　10、网络与多线程<br>\r\n<br>\r\n　　11、位置与地图服务<br>\r\n<br>\r\n　　12、SQLite数据库<br>\r\n<br>\r\n　　13、真机调试<br>\r\n<br>\r\n　　14、本地通知与远程通知<br>\r\n<br>\r\n　　15、cocos2D游戏开发<br>\r\n<br>\r\n　　六.项目开发<br>\r\n\r\n\r\n\r\n          <div marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" width=\"100%\">\r\n              <div>\r\n                <div id=\"kp_box_87\" data-pid=\"87\" data-track-click=\"{&quot;mod&quot;:&quot;kp_popu_87-112&quot;,&quot;con&quot;:&quot;,,&quot;}\"><div class=\"placeholder\">\r\n<script type=\"text/javascript\" src=\"http://static.mediav.com/js/mvf_news_feed.js\"></script>\r\n            <div class=\"mediav_ad\"><newsfeed class=\"newsfeed QIHOO__WEB__SO__1562757248919_456\" id=\"QIHOO__WEB__SO__1562757248919_456\" style=\"display: block; margin: 0px; padding: 0px; border: none; width: 600px; height: auto; overflow: hidden; position: relative; text-align: left; font-size: 18.4615px;\"><info-div id=\"QIHOO__WEB__SO__1562757248919_456-info\" style=\"zoom:1\"><info-div class=\"QIHOO__WEB__SO__1562757248919_456 largeImage item-box clk\" data-href=\"https://s2.nzbdw.com/s?type=2&amp;r=20&amp;mv_ref=bbs.csdn.net&amp;enup=CAABai9jDggAAg5jL2oA&amp;mvid=MjM5NjQ4NjAyMjczOTEyMjEwNTAwMTg&amp;bid=137543a00165b339&amp;price=AAAAAF0lyIAAAAAAAAN0GNDpz+wViKm3PGw7uA==&amp;finfo=DAABCAABAAABMggAAgAAAEcEAAM/a0ZRIAAAAAAIAAIAAAADCgADFs7W3/IsjvkIAAQAAABcBgAGLbcGAAoAAAYADD9cCgAPAAAAAAAusSAA&amp;ugi=FcTgigEVyNtrTBUCFcoEFcoEFQAAFf3i2/gIJcgBFoCAmeq41MYFHBaalOrUscfFmioVAAAA&amp;uai=FYD2kQIlAhUEFr6WwK3w8ebOLRXyCCXC9IYNFAIVABUaFAAcFu/t9eOOr6rbGhUAAAA&amp;ubi=FZjmVxWK8eACFea+pRgVzIv4WhUEFRwWutDUrxcWvpbVlPq3684tNAIWsOCQgAglBhXU2IiWDhWuARUANqX20r/LmL6jwAEA&amp;clickid=0&amp;cpx=__OFFSET_X__&amp;cpy=__OFFSET_Y__&amp;cs=__EVENT_TIME_START__&amp;ce=__EVENT_TIME_END__&amp;csign2=QzWflBYie8G=&amp;url=http%3A%2F%2Fvip.ntwf09.top%2F\" data-clk=\"https://max-l.mediav.com/rtb?type=3&amp;ver=1&amp;v=CGQSEDEzNzU0M2EwMDE2NWIzMzkYgPuIASCisEUoAWIXMjM5NjQ4NjAyMjczOTEyMjEwNTAwMThwAA&amp;k=op3vugAAAAA=&amp;i=gtZpCnJP_AgK&amp;exp=BQBECQBEEABDIABD&amp;x=__OFFSET_X__&amp;y=__OFFSET_Y__&amp;st=__EVENT_TIME_START__&amp;et=__EVENT_TIME_END__&amp;adw=__ADSPACE_W__&amp;adh=__ADSPACE_H__&amp;tc=&amp;turl=\">\r\n    <info-div class=\"largeImage-wrapper\">\r\n        <info-div class=\"largeImage-body\">\r\n            <info-div class=\"largeImage-title\">这个没有双腿的女孩日赚1000美元，她赚钱的方式让人想不到</info-div>\r\n            <info-div class=\"largeImage-grid-wrap\">\r\n                <info-div class=\"img\" style=\"background-image:url(https://s3m.nzwgs.com/galileo/719244-d15f331b78577aa09b6755f5ebd88e39.jpg);\">\r\n                    <info-div class=\"ads-tag\"></info-div>\r\n                </info-div>\r\n            </info-div>\r\n            <info-div class=\"largeImage-extra\">\r\n                <info-div class=\"largeImage-ad-tag\">广告</info-div>\r\n                <info-div class=\"largeImage-ad-src\">歌德教育 · 猎媒</info-div>\r\n            </info-div>\r\n        </info-div>\r\n    </info-div>\r\n</info-div>\r\n</info-div></newsfeed></div>\r\n            <script type=\"text/javascript\">\r\n            NEWS_FEED({\r\n                w:600,//必须大于300\r\n                showid : \'0UvTI1\',\r\n                placeholderId : \'placeholder\',//容器ID\r\n                fId : \'\',//信息流容器ID\r\n                inject : \'cads\'\r\n            })\r\n                        </script>\r\n </div></div>\r\n              </div>\r\n          </div>\r\n        <!-- <div class=\"question_wrap\"><span>问题点数：</span><em>分</em></div> -->\r\n      </div>', '2019-07-10 19:14:42', '0', '5', '21');
INSERT INTO `post` VALUES ('17', '2', '1', '关于zynq双核使用问题', '<div class=\"post_body post_body_min_h\">\r\n          最近发现一个问题，想采用zynq的双核处理器分别跑一个LWIP协议栈，但是无法实现。感觉是定时器中断的问题，先启动cpu0的lwip可以正常工作，再启动cpu1就会使cpu0复位，通过调试发现程序在使能中断部分导致cpu0复位，但不知道为什么会这样，请问有没有人用过双核、或双核定时器中断的相关实例，求助！！！！！！！<img src=\"https://forum.csdn.net/PointForum/ui/scripts/csdn/Plugin/003/monkey/50.gif\" alt=\"\">\r\n\r\n\r\n          <div marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" width=\"100%\">\r\n              <div>\r\n                <div id=\"kp_box_87\" data-pid=\"87\" data-track-click=\"{&quot;mod&quot;:&quot;kp_popu_87-387&quot;,&quot;con&quot;:&quot;,,&quot;}\"><div id=\"_satcbejbbu\"><iframe width=\"728\" frameborder=\"0\" height=\"90\" scrolling=\"no\" src=\"https://pos.baidu.com/s?hei=90&amp;wid=728&amp;di=u3532146&amp;ltu=https%3A%2F%2Fbbs.csdn.net%2Ftopics%2F392504025&amp;psi=88f44421719b185f00c3d9a6d98a44c8&amp;cec=UTF-8&amp;cfv=0&amp;psr=1280x720&amp;ps=311x199&amp;cdo=-1&amp;col=zh-CN&amp;dc=3&amp;par=1280x680&amp;dtm=HTML_POST&amp;ltr=https%3A%2F%2Fso.csdn.net%2Fso%2Fsearch%2Fs.do%3Fq%3Dzynq%25E4%25B8%258A%25E6%2593%258D%25E4%25BD%259C%25E7%25B3%25BB%25E7%25BB%259F%26t%3Ddiscuss&amp;tcn=1562758177&amp;tpr=1562758176692&amp;pis=-1x-1&amp;cmi=4&amp;exps=111000,117008,110011&amp;ti=%E5%85%B3%E4%BA%8Ezynq%E5%8F%8C%E6%A0%B8%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98-CSDN%E8%AE%BA%E5%9D%9B&amp;prot=2&amp;drs=1&amp;ant=0&amp;ari=2&amp;dai=1&amp;dri=0&amp;cpl=3&amp;chi=1&amp;cja=false&amp;tlm=1562758176&amp;pss=1263x1317&amp;cce=true&amp;pcs=1263x614&amp;ccd=24&amp;dis=0\"></iframe></div><script type=\"text/javascript\" src=\"//rabc1.iteye.com/site/js/u0sxl.js?cxpup=mgtw\"></script></div>\r\n              </div>\r\n          </div>\r\n        <!-- <div class=\"question_wrap\"><span>问题点数：</span><em>分</em></div> -->\r\n      </div>', '2019-07-10 19:31:48', '0', '1', '11');
INSERT INTO `post` VALUES ('18', '2', '1', '整个操作系统在单片机上是怎么跑起来', '<div class=\"post_body post_body_min_h\">\r\n          学完了51单片机，想学学嵌入式操作系统，但是对这个操作系统这个概念不是恨透，希望有人能详细的解答一下整个操作系统在单片机上是怎么跑起来，最好是从通电那一刻开始讲起。先让我有个大体的方向就行。谢谢了\r\n\r\n\r\n          <div marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" width=\"100%\">\r\n              <div>\r\n                <div id=\"kp_box_87\" data-pid=\"87\" data-track-click=\"{&quot;mod&quot;:&quot;kp_popu_87-112&quot;,&quot;con&quot;:&quot;,,&quot;}\"><div class=\"placeholder\">\r\n<script type=\"text/javascript\" src=\"http://static.mediav.com/js/mvf_news_feed.js\"></script>\r\n            <div class=\"mediav_ad\"><newsfeed class=\"newsfeed QIHOO__WEB__SO__1562758406822_496\" id=\"QIHOO__WEB__SO__1562758406822_496\" style=\"display: block; margin: 0px; padding: 0px; border: none; width: 600px; height: auto; overflow: hidden; position: relative; text-align: left; font-size: 18.4615px;\"><info-div id=\"QIHOO__WEB__SO__1562758406822_496-info\" style=\"zoom:1\"><info-div class=\"QIHOO__WEB__SO__1562758406822_496 largeImage item-box clk\" data-href=\"https://s2.nzbdw.com/s?type=2&amp;r=20&amp;mv_ref=bbs.csdn.net&amp;enup=CAABai9jDggAAg5jL2oA&amp;mvid=MjM5NjQ4NjAyMjczOTEyMjEwNTAwMTg&amp;bid=137544c19e93e828&amp;price=AAAAAF0lzQYAAAAAAAGRv5MvlWG5aVXVX+LaJA==&amp;finfo=DAABCAABAAAC4wgAAgAAAFoEAAM/ewnBrwCgVgAIAAIAAAADCgADC71NL0ybWNMIAAQAAABwBgAGLbcGAAoAAAYADD9cCAAOAAAAPwoADwAAAAAAcMMwAA&amp;ugi=FcTgigEVyNtrTBUCFcoEFcoEFQAAFf/z8sAKJcgBFoC2xrrB1MYFHBbg5Y+x37C71tgBFQAAAA&amp;uai=FYD2kQIlAhUEFr6JjZzvhaK9FxXyCCXfn+6uDhQCFQAVGhQAHBbS9tGVtp+uu3kVAAAA&amp;ubi=Fai7WRXUy+UCFazBvxgVpK2nWxUEFRwW0ru8sxcWvomig/nLpr0XNAIWpOCQgAglBhWGhtq5DRWuARUANsK7nbff/LWTCAA&amp;clickid=0&amp;cpx=__OFFSET_X__&amp;cpy=__OFFSET_Y__&amp;cs=__EVENT_TIME_START__&amp;ce=__EVENT_TIME_END__&amp;csign2=s8zdYez2XKU=&amp;url=http%3A%2F%2Fvip1.wjslw.mobi\" data-clk=\"https://max-l.mediav.com/rtb?type=3&amp;ver=1&amp;v=CGQSEDEzNzU0NGMxOWU5M2U4MjgYgPuIASCisEUoAWIXMjM5NjQ4NjAyMjczOTEyMjEwNTAwMThwAA&amp;k=dnz1sQAAAAA=&amp;i=ch6rsYR-_Ag_&amp;exp=BgBECgBEEABDJQBD&amp;x=__OFFSET_X__&amp;y=__OFFSET_Y__&amp;st=__EVENT_TIME_START__&amp;et=__EVENT_TIME_END__&amp;adw=__ADSPACE_W__&amp;adh=__ADSPACE_H__&amp;tc=&amp;turl=\">\r\n    <info-div class=\"largeImage-wrapper\">\r\n        <info-div class=\"largeImage-body\">\r\n            <info-div class=\"largeImage-title\">北京幼儿园小姐姐没事用手机赚钱，半年后存款让人羡慕！</info-div>\r\n            <info-div class=\"largeImage-grid-wrap\">\r\n                <info-div class=\"img\" style=\"background-image:url(https://s3m.nzwgs.com/galileo/732884-117225d3c3ea485efa9848596271da4c.jpg);\">\r\n                    <info-div class=\"ads-tag\"></info-div>\r\n                </info-div>\r\n            </info-div>\r\n            <info-div class=\"largeImage-extra\">\r\n                <info-div class=\"largeImage-ad-tag\">广告</info-div>\r\n                <info-div class=\"largeImage-ad-src\">阔蒙 · 猎媒</info-div>\r\n            </info-div>\r\n        </info-div>\r\n    </info-div>\r\n</info-div>\r\n</info-div></newsfeed></div>\r\n            <script type=\"text/javascript\">\r\n            NEWS_FEED({\r\n                w:600,//必须大于300\r\n                showid : \'0UvTI1\',\r\n                placeholderId : \'placeholder\',//容器ID\r\n                fId : \'\',//信息流容器ID\r\n                inject : \'cads\'\r\n            })\r\n                        </script>\r\n </div></div>\r\n              </div>\r\n          </div>\r\n        <!-- <div class=\"question_wrap\"><span>问题点数：</span><em>分</em></div> -->\r\n      </div>', '2019-07-10 19:33:52', '0', '4', '12');
INSERT INTO `post` VALUES ('19', '2', '1', '求高手赐教，为什么一个操作系统可以安装到不同的CPU上？', '<div class=\"post_body post_body_min_h\">\r\n          比如AMD和INTEL的CPU，----------又或者其他的牌子的CPU&nbsp;，比如苹果的CPU，所用的指令系统都是不一样的吧，如果一个指令占2个字节，那么这两个字节的内容对于AMD和INTEL应该都是不同的吧。<br>\r\n<br>\r\n那么操作系统如何针对各自不同的CPU生成各自不同的指令呢？是通过驱动程序吗？<br>\r\n<br>\r\n而且，为什么windows不针对各自不同的CPU生成各自对应专用系统而提高性能呢？\r\n\r\n\r\n          <div marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" width=\"100%\">\r\n              <div>\r\n                <div id=\"kp_box_87\" data-pid=\"87\" data-track-click=\"{&quot;mod&quot;:&quot;kp_popu_87-112&quot;,&quot;con&quot;:&quot;,,&quot;}\"><div class=\"placeholder\">\r\n<script type=\"text/javascript\" src=\"http://static.mediav.com/js/mvf_news_feed.js\"></script>\r\n            <div class=\"mediav_ad\"><newsfeed class=\"newsfeed QIHOO__WEB__SO__1562758569909_848\" id=\"QIHOO__WEB__SO__1562758569909_848\" style=\"display: block; margin: 0px; padding: 0px; border: none; width: 600px; height: auto; overflow: hidden; position: relative; text-align: left; font-size: 18.4615px;\"><info-div id=\"QIHOO__WEB__SO__1562758569909_848-info\" style=\"zoom:1\"><info-div class=\"QIHOO__WEB__SO__1562758569909_848 largeImage item-box clk\" data-href=\"https://s2.nzbdw.com/s?type=2&amp;r=20&amp;mv_ref=bbs.csdn.net&amp;enup=CAABai9jDggAAg5jL2oA&amp;mvid=MjM5NjQ4NjAyMjczOTEyMjEwNTAwMTg&amp;bid=137544ea6ac26029&amp;price=AAAAAF0lzakAAAAAAAMfwW8wUBf0S20LSsV7Kw==&amp;finfo=DAABCAABAAAB4QgAAgAAAEMEAAM/eUi7JSQSXgAIAAIAAAADCgADGUwpId+usFAIAAQAAABOBgAGLbcGAAoAAAYADD9cCAAOAAAAPwoADwAAAAAASWUQAA&amp;ugi=FcTgigEVyNtrTBUCFcoEFcoEFQAAFZ/kz+UIJcgBFoDx/9XC1MYFHBac8Z/i8LCH7ScVAAAA&amp;uai=FYD2kQIlAhUEFr7g+8WWgpDMMhXyCCWzmeL3AhQCFQAVGhQAHBaC+Y+KpveXyHMVAAAA&amp;ubi=FZS9VxWm+eQCFYiAvBgVmP2gWxUEFRwW8u/2rBcWvuCQraDIlMwyNAIWsMCQgAglBhWXxe+aARWuARUANqTk/Iap9ab+2wEA&amp;clickid=0&amp;cpx=__OFFSET_X__&amp;cpy=__OFFSET_Y__&amp;cs=__EVENT_TIME_START__&amp;ce=__EVENT_TIME_END__&amp;csign2=cXHdhoIXK01=&amp;url=http%3A%2F%2Fqs1.ntcfp.cn\" data-clk=\"https://max-l.mediav.com/rtb?type=3&amp;ver=1&amp;v=CGQSEDEzNzU0NGVhNmFjMjYwMjkYgPuIASCisEUoAWIXMjM5NjQ4NjAyMjczOTEyMjEwNTAwMThwAA&amp;k=RZB5kQAAAAA=&amp;i=cttd_SF-_AgD&amp;exp=BQBECQBEEQBDIwBD&amp;x=__OFFSET_X__&amp;y=__OFFSET_Y__&amp;st=__EVENT_TIME_START__&amp;et=__EVENT_TIME_END__&amp;adw=__ADSPACE_W__&amp;adh=__ADSPACE_H__&amp;tc=&amp;turl=\">\r\n    <info-div class=\"largeImage-wrapper\">\r\n        <info-div class=\"largeImage-body\">\r\n            <info-div class=\"largeImage-title\">人生迷茫，不知道干什么？学习这个月赚两万的方法，操作简单！</info-div>\r\n            <info-div class=\"largeImage-grid-wrap\">\r\n                <info-div class=\"img\" style=\"background-image:url(https://s3m.nzwgs.com/galileo/716618-5de45319ee3cadbd1616b8345a93f0b3.jpg);\">\r\n                    <info-div class=\"ads-tag\"></info-div>\r\n                </info-div>\r\n            </info-div>\r\n            <info-div class=\"largeImage-extra\">\r\n                <info-div class=\"largeImage-ad-tag\">广告</info-div>\r\n                <info-div class=\"largeImage-ad-src\">班尼思 · 猎媒</info-div>\r\n            </info-div>\r\n        </info-div>\r\n    </info-div>\r\n</info-div>\r\n</info-div></newsfeed></div>\r\n            <script type=\"text/javascript\">\r\n            NEWS_FEED({\r\n                w:600,//必须大于300\r\n                showid : \'0UvTI1\',\r\n                placeholderId : \'placeholder\',//容器ID\r\n                fId : \'\',//信息流容器ID\r\n                inject : \'cads\'\r\n            })\r\n                        </script>\r\n </div></div>\r\n              </div>\r\n          </div>\r\n        <!-- <div class=\"question_wrap\"><span>问题点数：</span><em>分</em></div> -->\r\n      </div>', '2019-07-10 19:36:35', '0', '5', '13');
INSERT INTO `post` VALUES ('20', '2', '1', '我用3天就看完操作系统原理，虽算不上精通但都可算上略知一二 ', '<div class=\"post_body post_body_min_h\">\r\n          我感觉操作系统原理没有别人说得那么难，只是比较抽象，不要盲目的相信别人，只要自己认真的学，总会懂得。我的学习经验对于原理的书不需要太过于深入了解所有细节，到你学习windows编程你自然会深入了解操作系统原理，只要略知一二就可以，就如我学微机原理那样，对于汇编的那一部分，我只是略略了解个大体，然后我用三个星期就把汇编搞定了，有了一个大体再学汇编就容易多了。不知你们会有这样的体会吗？如你看一本书，看前几章的时候感觉很多不懂，但你再往后看就会不知不觉的了解了前几章的知识了。所以我就说了解一个大体，大概知道每一章里面的内容是什么有什么用，然后再研究每一章的细节，这样很容易就会搞定一门课程的。我就是这样把汇编搞定的.<br>\r\n<br>\r\n以上只是我的一些拙见，如有什么不对就大家指点一下我，我只是一个学生\r\n\r\n\r\n          <div marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" width=\"100%\">\r\n              <div>\r\n                <div id=\"kp_box_87\" data-pid=\"87\" data-track-click=\"{&quot;mod&quot;:&quot;kp_popu_87-112&quot;,&quot;con&quot;:&quot;,,&quot;}\"><div class=\"placeholder\">\r\n<script type=\"text/javascript\" src=\"http://static.mediav.com/js/mvf_news_feed.js\"></script>\r\n            <div class=\"mediav_ad\"><newsfeed class=\"newsfeed QIHOO__WEB__SO__1562758889981_893\" id=\"QIHOO__WEB__SO__1562758889981_893\" style=\"display: block; margin: 0px; padding: 0px; border: none; width: 600px; height: auto; overflow: hidden; position: relative; text-align: left; font-size: 18.4615px;\"><info-div id=\"QIHOO__WEB__SO__1562758889981_893-info\" style=\"zoom:1\"><info-div class=\"QIHOO__WEB__SO__1562758889981_893 singleImage clk\" data-href=\"https://ssxd.mediav.com/s?type=2&amp;r=20&amp;mv_ref=bbs.csdn.net&amp;enup=CAABai9jDggAAg5jL2oA&amp;mvid=MjM5NjQ4NjAyMjczOTEyMjEwNTAwMTg&amp;bid=1375453a52ca2c92&amp;price=AAAAAF0lzukAAAAAAARTJ5m2vFmy5lA6gyoVzg==&amp;finfo=DAABCAABAAABDwgAAgAAAEsEAAM/bHe+oAAAAAAIAAIAAAADCgADI/AP0CKdUgUIAAQAAABOBgAGLbcGAAoAAAgADgAAAD8KAA8AAAAAAClZ8AA&amp;ugi=FcTgigEVyNtrTBUCFcoEFcoEFQAAFb2QwLAGJcgBFoCxlofF1MYFHBbo+eapn6HmvBEVAAAA&amp;uai=FYD2kQIlAhUEFr7d9fn+rYPwRxXyCCXxw7KaDhQCFQAVGhQAHBa39ZSMsZPOpyMVAAAA&amp;ubi=FZKvWhWA8uMCFb6WthgV2qKWWxUEFRwW7L7otBcWvt2K4Yj0h/BHNAIWsOAQJQYVmZyz3gQV+gUVADb0pv+w5YWfuQQA&amp;clickid=0&amp;cpx=__OFFSET_X__&amp;cpy=__OFFSET_Y__&amp;cs=__EVENT_TIME_START__&amp;ce=__EVENT_TIME_END__&amp;csign2=x4LEmcTAXnU=&amp;url=http%3A%2F%2Fgp.jyfengli.cn%2F\" data-clk=\"https://max-l.mediav.com/rtb?type=3&amp;ver=1&amp;v=CGQSEDEzNzU0NTNhNTJjYTJjOTIYgPuIASCisEUoAWIXMjM5NjQ4NjAyMjczOTEyMjEwNTAwMThwAA&amp;k=GzoQpQAAAAA=&amp;i=1sBBIBFR_A3u&amp;exp=BQBECQBEAQJEEABDIABD&amp;x=__OFFSET_X__&amp;y=__OFFSET_Y__&amp;st=__EVENT_TIME_START__&amp;et=__EVENT_TIME_END__&amp;adw=__ADSPACE_W__&amp;adh=__ADSPACE_H__&amp;tc=&amp;turl=\">\r\n    <info-div class=\"wrap\">\r\n        <info-div class=\"singleImage-img singleImage-img-left\">\r\n            <info-div class=\"img\" style=\"background-image:url(https://s3m.mediav.com/galileo/740297-7d1e77699a211255bb223bf7523c15a5.jpg)\"><info-div class=\"ads-tag\"></info-div></info-div>\r\n        </info-div>\r\n        <info-div class=\"singleImage-body singleImage-body-left\">\r\n            <info-div class=\"singleImage-title\">天津又出一股市怪才！50万资金入市，如今身家过亿</info-div>\r\n            <info-div class=\"singleImage-desc\">股管家 · 顶新</info-div>\r\n        </info-div>\r\n   </info-div>\r\n   <info-div style=\"clear:both;\"></info-div>\r\n</info-div>\r\n</info-div></newsfeed></div>\r\n            <script type=\"text/javascript\">\r\n            NEWS_FEED({\r\n                w:600,//必须大于300\r\n                showid : \'0UvTI1\',\r\n                placeholderId : \'placeholder\',//容器ID\r\n                fId : \'\',//信息流容器ID\r\n                inject : \'cads\'\r\n            })\r\n                        </script>\r\n </div></div>\r\n              </div>\r\n          </div>\r\n        <!-- <div class=\"question_wrap\"><span>问题点数：</span><em>分</em></div> -->\r\n      </div>', '2019-07-10 19:42:04', '0', '6', '25');
INSERT INTO `post` VALUES ('21', '3', '1', 'C语言', '简单介绍C语言\n\nC语言数据变量的声明\n\n整型变量的声明用int，如：int a;\n\n单精度浮点型的声明用float，如：float b;\n\n双精度浮点型的声明用double，如：double c;\n\nC语言基本的输入输出\n\n从键盘输入数据用scanf(),\n\n调用格式为：scanf(“%d”, &a);scanf(“%f”, &b);scanf(“%lf”, &c);\n\n输出数据到屏幕用printf()\n\n调用格式为：printf(“%d %f %lf”,a,b,c);\n\n输出“hello world”\n\n#include<stdio.h>\nint main()\n{\n    printf(\"hello world\");\n    return 0;\n}\n简单的数值计算：\n\n#include<stdio.h>        //包含一个头文件stdio.h以完成程序的基本输入输出\n \nint main()     //程序主函数，每个程序必须要有的部分\n \n{    //语句框，表示框内的语句属于主函数，在主函数声明的变量只在主函数内部有效\n \n    int a,a1=1;    //声明整形变量a和a1，并直接给a1赋初值为1（使用任何变量都必须先声明后使用）\n \n    a=2;    //给声明过的整形变量a赋值为2\n \n    float b,b1=1.5;   //声明单精度浮点类型变量b和b1，并直接给b1赋初值为1.5\n \n    b=3.5;           //给声明过的单精度浮点数b赋值为3.5\n \n    double c,c1=2.5;   //声明双精度浮点类型变量c和c1，并直接给c1赋初值为2.5\n \n    c=4.5;            //给声明过的双精度浮点数c赋值为4.5\n \n    double d=a+b+c+a1+b1+c1;   //声明一个双精度浮点数d，并把a+b+c+a1+b1+c1的值赋给d\n \n    printf(\"%lf\",d);     //输出d\n \n    scanf(\"%d %f %lf\",&a,&b,&c);   //从键盘上输入三个值，并分别重新赋给a，b，c，其中%d %f %lf称为占位符，其分别为整型、单精度浮点型、双精度浮点型的占位符表示形式\n \n    printf(\"%d %f %lf\",a,b,c);       //输出a,b,c\n \n    return 0;                     //主函数（main函数）结束的标志\n \n}\n单精度浮点数(float)与双精度浮点数(double)的区别：\n\n              01.在内存中占有的字节数不同\n\n　　　　      单精度浮点数在机内存占4个字节\n\n　　　　      双精度浮点数在机内存占8个字节\n\n　　       02.有效数字位数不同\n\n　　　　      单精度浮点数有效数字8位\n\n　　　　      双精度浮点数有效数字16位\n\n　　       03.数值取值范围\n\n　　　　      单精度浮点数的表示范围：-3.40E+38~3.40E+38\n\n　　　　      双精度浮点数的表示范围：-1.79E+308~-1.79E+308\n\n　　       04.在程序中处理速度不同\n\n　　　　      一般来说，CPU处理单精度浮点数的速度比处理双精度浮点数快', '2019-07-10 17:25:14', '0', '5', '1001');
INSERT INTO `post` VALUES ('22', '3', '1', 'C++', '类数据成员的初始化，这份工作主要是构造函数负责的，构造函数的职责之一就是对数据成员进行正确初始化。实际上，构造函数的执行过程主要有两个阶段：\r\n\r\n        (1)初始化阶段\r\n\r\n        (2)普通计算阶段\r\n\r\n\r\n\r\n        初始化阶段是指对数据成员的初始化主要在构造函数的初始化列表中进行。普通计算阶段是指对数据成员的初始化是在构造函数的函数体中进行。因此，初始化阶段与普通计算阶段是两个不同的概念，需要予以区分。下面来看看什么是构造函数的初始化列表。\r\n\r\n        下面是一个时钟类Clock的定义：\r\n\r\nclass Clock\r\n{\r\npublic:\r\n    Clock(int hour=0, int minute=0, int second = 0);\r\n    ~Clock(){}\r\n\r\nprivate:\r\n    int hour_;\r\n    int minute_;\r\n    int second_;\r\n};\r\n        下面是Clock的构造函数实现：\r\nClock::Clock(int hour, int minute, int second): hour_(hour), minute_(minute), second_(second)\r\n{\r\n    /*   //这此称为普通计算段\r\n    hour_ = hour;   \r\n    minute_ = minute;\r\n    second_ = second;\r\n    */\r\n    cout << \"Clock()...\"<<endl;\r\n}\r\n        上面代码中的“：”号后面的代码就是构造函数的初始化列表，也就是构造函数执行的第一阶段，利用构造函数的初始化列表来对数据成员的初始化其效率是更高的，其实在函数体内执行的代码在某种意义上来说，不能称为初始化，是赋值操作，是构造函数的普通计算段，它的效率更低。构造函数的初始化列表中，如果有多个数据成员，成员之间则以逗号分隔。\r\n\r\n\r\n        我们这里说的数据成员，包含普通数据类型的数据成员，如int,double, char等，还有类对象的数据成员，const数据成员以及引用数据成员。对数据成员的初始化我们建议在构造函数的初始化列表中。而对于下面几种情形而言是必须要在构造函数的初始化列表中进行的：\r\n\r\n        (1) 类对象成员，当它所对应的类没有默认构造函数时，只能在构造函数的初始化列表中进行(如果有默认构造函数，虽然可以不在初始化列表中进行，考虑到效率的问题，不建议在普通计算段中初始化)\r\n\r\n        (2) const成员，其初始化也只能在构造函数的初始化列表中进行\r\n\r\n        (3) 引用成员， 其初始化也只能在构造函数的初始化列表中进行\r\n\r\n        声明一下：数据成员的初始化顺序，与构造函数的初始化列表中的顺序无关，与在类中声明的成员顺序有关。\r\n        下面是示例： \r\n\r\n       \r\n\r\nclass Object\r\n{\r\npublic:\r\n    enum E_TYPE\r\n    { \r\n        TYPE_A = 100,\r\n        TYPE_B\r\n    };\r\n\r\npublic:\r\n    Object(int num = 0): num_(num), kNum_(num), refNum(num_)   //主要关注这行初始化列表。\r\n    {\r\n        cout << \"Object...\"<<endl;\r\n    }\r\n\r\nprivate:\r\n    int num_;\r\n    const int kNum_; //const 成员\r\n    int & refNum_;    //引用成员\r\n};\r\n\r\nint main()\r\n{\r\n    Object obj1(10);\r\n    Object obj2(20);\r\n    \r\n    //对任何对象而言TYPE_A,TYPE_B都是常量\r\n    cout << Object::TYPE_A << endl;\r\n    cout << obj1::TYPE_A <<endl;\r\n    cout << obj2::TYPE_A << endl;\r\n\r\n    cout << Object::TYPE_B << endl;\r\n    cout << obj1::TYPE_B << endl;\r\n    cout << obj2::TYPE_B << endl;\r\n\r\n    return 0;\r\n}', '2019-07-10 17:27:31', '0', '5', '1233');
INSERT INTO `post` VALUES ('23', '3', '1', 'Java', 'import java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.text.SimpleDateFormat;\nimport java.util.Calendar;\nimport java.util.Date;\n \n/**\n *\n *@author yang\n *@类功能说明:创建日志的工具类\n *@修改日期：2015-11-3 下午05:02:41\n *@修改说明：\n *@创建时间：2015-11-3 下午05:02:41\n *@版本：V1.0\n */\npublic class LogUtil {\n    private String pathurl   =UrlInfo.GLOBALS_PATH+\"/mdlog/mdWeb/\";//另一个类中public  static String GLOBALS_PATH=\"\";         //设置日志的全局变量\n    private String time     =new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(new Date());\n    private String daytime   =new SimpleDateFormat(\"yyyyMMdd\").format(new Date());\n    //创建字符文件流\n    private FileWriter     fw=null;\n    //创建字符缓冲流\n    private BufferedWriter bw=null;\n    /**\n     *\n     * @方法功能说明： 写文件的工具类\n     * @修改者名字：yang\n     * @修改日期 ： 2015-11-4 \n     * @参数： @param message   \n     */\n    public void info(String message){\n        String os=System.getProperty(\"os.name\");\n        try {\n/**\n * 判断操作系统名称是windows\n */\n            if(os.startsWith(\"Windows\")){\n                try {\n//判断是否有C D E盘\n                    if(new File(UrlInfo.PATH_CDEF_D).isDirectory()){\n                        UrlInfo.GLOBALS_PATH=UrlInfo.PATH_CDEF_D;\n                    }else if(new File(UrlInfo.PATH_CDEF_E).isDirectory()){\n                        UrlInfo.GLOBALS_PATH=UrlInfo.PATH_CDEF_E;\n                    }else if(new File(UrlInfo.PATH_CDEF_C).isDirectory()){\n                        UrlInfo.GLOBALS_PATH=UrlInfo.PATH_CDEF_C;\n                    }\n                    File fi=new File(pathurl);\n//判断mdlog目录是否存在\n                    File fl=new File(UrlInfo.GLOBALS_PATH+\"/mdlog/\");\n                    if(!fl.isDirectory()){\n                        fl.mkdir();\n                    }\n//判断文件夹是否存在\n                    if(!fi.isDirectory()){\n//如果不存在，那么创建一个文件夹\n                        fi.mkdir();\n                    }\n//true代表在原有基础上进行添加txt内容\n                    this.fw=new FileWriter(pathurl+daytime+\".log\",true);\n                    this.bw=new BufferedWriter(this.fw);\n//写入信息内容\n                    this.bw.write(time+\":\"+message+\"\\r\\n\");\n//不用编码，只要统一了编码GBK那么就行\n                } catch (IOException e) {\n                    this.bw.write(\"write daily error：\"+\"\\r\\n\"+e.getMessage());\n                }finally{\n                    this.bw.close();\n                    this.fw.close();\n                }\n            }\n/**\n * 判断操作系统是linux系统\n */\n            else{\n//设置linux下的全局变量\n                UrlInfo.GLOBALS_PATH=\"/usr/\";\n                try {\n                    File fi=new File(pathurl);\n//判断文件夹是否存在\n                    if(!fi.isDirectory()){\n//如果不存在，那么创建一个文件夹\n                        fi.mkdir();\n                    }\n//true代表在原有基础上进行添加txt内容20151104.log\n                    this.fw=new FileWriter(pathurl+daytime+\".log\",true);\n                    this.bw=new BufferedWriter(this.fw);\n//写入信息内容\n                    this.bw.write(time+\":\"+message+\"\\r\\n\");\n// this.bw.write(time+\":\"+new String(b,UrlInfo.GLOBALS_UNICODE)+\"\\r\\n\");\n                } catch (IOException e) {\n                    e.printStackTrace();\n                    this.bw.write(\"write daily error：\"+\"\\r\\n\"+e.getMessage());\n                }finally{\n                    this.bw.close();\n                    this.fw.close();\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n \n    /**\n     *\n     * @方法功能说明： 获取当前月往前推一个月的日期\n     * @修改者名字：yang\n     * @修改日期 ： 2015-11-8 \n     * @修改内容 ：\n     * @参数：     int 多少月  \n     * @return String\n     * @异常抛出:\n     */\n    public  int getForwardDate(int what){\n        SimpleDateFormat  sdf = new SimpleDateFormat(\"yyyyMMdd\");\n        Calendar cl = Calendar.getInstance();\n        cl.add(Calendar.MONTH, what);//从现在算，之前month个月\n        Date dateFrom = cl.getTime();\n        return Integer.parseInt(sdf.format(dateFrom));\n    }\n}', '2019-07-10 17:29:12', '0', '5', '2332');
INSERT INTO `post` VALUES ('24', '3', '1', 'C#', '想研究一些面向对象的东西，也许是代码写得还不够多。感觉还不好，看那些教程，不是嫌太水就是太难看不懂。心情很是落寞\n\n不过再怎样也要坚持每天发一篇博客。\n\n这篇来说一下C#中的数组，多维数组，交错数组的一些东西。\n\n有那么一点点研究茴香豆的茴有四种写法的感觉。\n\n \n\n先讲三点显而易见却又值得一提的东西\n\n \n\n第一点数组是一种数据结构\n\n似乎没什么好解释的\n\n \n\n第二点数组类型是从抽象类Array派生出的引用类型\n\n与C当中的数组不同的是C＃以面向对象的方式设计的。\n\n所以再次证明 任何东西都是对象\n\n \n\n第三点C＃的数组可以开很大\n\nC直接开在堆栈不同的还有C＃的数组在托管栈只有引用，而实际的数据是放在托管堆里面的。\n\nint[, , ] a = new int[500, 500, 500];\n\n这样是不会有问题的。同样的大小在C早就……了\n\n虽然是这么说，正常使用是不大可能用到这么大的数组。\n\n \n\n第四点数组类型可以使用foreach迭代\n\n这个部分我想另外写一篇来研究这个', '2019-07-10 19:01:33', '0', '5', '354');
INSERT INTO `post` VALUES ('25', '3', '1', 'Python', '上节已经介绍了极简的Python代码编写，已经用到了赋值语句，本节对Python的程序语句进行介绍。\n一、	常用命令\n在介绍Python语句之前，先介绍一下几个有用的Python命令。\n\ndir(模块名或类名或变量名或表达式名)：获得当前模块、变量对应类型、表达式计算值对应类的属性列表\ntype（变量名或表达式名）:获取变量或表达式计算值的对应类型；\nhelp(类名)或help（类名.属性或方法名）或help（变量.属性或方法名），如：help(name.count)：给出参数对应的帮助说明，需要说明的是一个变量如果是系统的类型或类实例，通过变量名.方法或属性能找到该类型或类的帮助。\n二、	Python的命名建议\n1、	文件名:全小写,可使用下划线\n2、	函数名:小写，可以用下划线风格单词以增加可读性。如：myfunction，my_example_function,大小写混合不推荐使用;\n3、	变量:变量名全部小写，由下划线连接各个单词。\n\n三、	Python的基本程序语句\n1、	注释语句\nPython中注释使用#开头，只能做单行注释，如果是多行，可以采用每行加#号。\n2、	import语句\nimport语句是引入已经定义好的模块，供需要使用的模块使用。有两种语法：\nimport 模块名\nfrom 模块名import 方法或属性名\nfrom 模块名import *\n\n这三者的区别是，第一种方法将整个模块都引入，可以使用这个模块所有的属性和方法，使用前需要带模块名的方式调用；第二种方法是只引入某个属性或方法，第三种方式用*号引入所有方法和属性。第二、三种方式引入的属性和方法在使用时不带模块名。但如果多个模块和引用模块存在相同的方法或属性则不能使用该方法。\n例如：\n\n>>> import math\n>>> sqrt(4)\nTraceback (most recent call last):\n  File \"<pyshell#1>\", line 1, in <module>\n    sqrt(4)\nNameError: name \'sqrt\' is not defined\n>>> math.sqrt(4)\n2.0\n>>> from math import sqrt\n>>> sqrt(4)\n2.0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n3、	def函数定义语句\nPython中的函数定义以def开始，具体语法如下：\ndef 函数名(变量列表):\n….语句体\n注意：函数的参数括号后必须加冒号，函数的声明必须顶格写，语句与函数的声明必须缩进4个空格(上面例子以4个点表示，请参见下面Python的代码嵌套格式部分的内容)，函数的返回可以以return返回，也可以不指定return自动结束。\n例子：\ndef add(n1,n2):\nreturn n1+n2\n\n4、	if条件语句\n语法如下：\nif 条件1:\n….执行的内容1\nelif 条件2:\n….执行的内容2\nelif 条件3：\n….执行的内容3\nelse:\n….执行的内容4\n注意：if总体用法与c类似，但每个关键词语句后面必须有冒号，每个执行内容必须缩进4个空格。\n举例：\nif add(1,4)>10:\n….print(‘和大于10’)\nelse：\n….print（’和小于等于10’）\n\n5、	for循环语句\nfor语句与C语言相差比较大，涉及到一些复杂数据类型“迭代”、”序列”，在这里不进行讲解，在后面学习了复杂数据类型再补充。在此只介绍基本语法：\nfor iterating_var in sequence:\n…. 语句块\n\n6、	while循环语句\nwhile循环与c语言类似，语法如下：\nwhile 条件表达式:\n…. 语句块\n注意：\n1、	条件表达式后必须有冒号；\n2、	while语句支持与c类似的break和continue；\n3、	语句块与while条件语句必须缩进4个空格；\n4、	与c语言的差异除了格式上的差异外，在Python中只支持前while语句，不能象C语言while语句既可以在循环体开始，也可以在循环体结束。\n例子：\n\n>>> while True:\n	name=input(\'Your name:\')\n	if(len(name)>0):\n		print(\'welcome you,\'+name+\'!\')\n	else:\n		print(\"Good bye!\")\n		break\n输出：		      \nYour name:jwp\nwelcome you,jwp!\nYour name:Lisi\nwelcome you,Lisi!\nYour name:\nGood bye!\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n补充说明一个界面使用方法，在交互式方式下，输入语句结束时需要输入两次回车，否则编辑器认为输入没有结束。\n7、	Python的代码嵌套格式\n这部分内容其实前面已经部分涉及到，主要有如下内容：\n\nPython用缩进表示一次代码嵌套，每次缩进代表该块相同缩进的代码是上层的嵌套代码，缩进符可以是TAB键、指定个数的空格，这种缩进的代码块类似于C语言的{}括起来的代码块。与c语言嵌套可以多用一次大括号类似，同一个缩进的代码块可以在上层代码基础上缩进超过一次，只要该代码块的缩进保持一致就可以；\nPython的缩进没有强制要求是多少个符合，只要求同一语句体必须缩进一致，我们甚至可以对同一个if语句不同条件用不同的缩进方式，只需要满足同一层的代码块一致，且比上一层有缩进就可以，且首层无缩进，但真正编写代码时建议一次缩进就用相同的缩进字符数，两次就是2倍，依次类推；\n首层语句体之前不能有空格，否则编译会报错；\nPython的函数定义、if、while、for语句最后必须有冒号，其后跟代码需要有一次缩进。\nPython这种代码缩进方式进行的代码嵌套与c语言差别很大，但使用缩进来嵌套代码有利于提高代码的可读性，不用再去进行括号匹配就可以知道相同层次的语句体范围。只是需要注意对同一文件使用不同编辑器编辑时，可能相同的TAB键有不同的缩进数，以及有些编辑器会强行转换连续的N个空格为TAB键的情况，可能导致缩进不一致。', '2019-07-10 19:01:37', '0', '5', '4354');
INSERT INTO `post` VALUES ('26', '3', '1', 'PHP', '<br><?php\r\n \r\n$array = array(\'lastname\', \'email\', \'phone\');\r\n$comma_separated = implode(\",\", $array);\r\n \r\necho $comma_separated; // lastname,email,phone\r\n \r\n// Empty string when using an empty array:\r\nvar_dump(implode(\'hello\', array())); // string(0) \"\"\r\n \r\n?>\r\nexplode — 使用一个字符串分割另一个字符串，返回一个数组\r\n\r\n<?php\r\n// 示例 1\r\n$pizza  = \"piece1 piece2 piece3 piece4 piece5 piece6\";\r\n$pieces = explode(\" \", $pizza);\r\necho $pieces[0]; // piece1\r\necho $pieces[1]; // piece2\r\n \r\n// 示例 2\r\n$data = \"foo:*:1023:1000::/home/foo:/bin/sh\";\r\nlist($user, $pass, $uid, $gid, $gecos, $home, $shell) = explode(\":\", $data);\r\necho $user; // foo\r\necho $pass; // *\r\n \r\n?>\r\n这里如果字符串没有任何符号可以进行分割的话，就需要考虑别的方法了\r\n\r\nstr_split — 将字符串转换为数组\r\n\r\n<?php\r\n \r\n$str = \"Hello Friend\";\r\n \r\n$arr1 = str_split($str);\r\n$arr2 = str_split($str, 3);\r\n \r\nprint_r($arr1);\r\nprint_r($arr2);\r\n \r\n?>\r\n输出结果\r\nArray\r\n(\r\n    [0] => H\r\n    [1] => e\r\n    [2] => l\r\n    [3] => l\r\n    [4] => o\r\n    [5] =>\r\n    [6] => F\r\n    [7] => r\r\n    [8] => i\r\n    [9] => e\r\n    [10] => n\r\n    [11] => d\r\n)\r\n \r\nArray\r\n(\r\n    [0] => Hel\r\n    [1] => lo\r\n    [2] => Fri\r\n    [3] => end\r\n)\r\n如果不兼容的话，就只有考虑别的方法了，将字符串逐位进行打断,\r\n\r\n这里有一个将字符串进行打断的手动的方法，是原来为了写日语半角的假名验证的一个方法\r\n\r\n这里是一串对半角的假名的枚举\r\n\r\nfunction kana_Perl($katakana){\r\n         \r\n    $katakana_array = array(\r\n        1=>\"ｱ\",2=>\"ｲ\",3=>\"ｳ\",4=>\"ｴ\",5=>\"ｵ\",\r\n         \r\n        6=>\"ｶ\",7=>\"ｷ\",8=>\"ｸ\",9=>\"ｹ\",10=>\"ｺ\",\r\n         \r\n        11=>\"ｻ\",12=>\"ｼ\",13=>\"ｽ\",14=>\"ｾ\",15=>\"ｿ\",\r\n         \r\n        16=>\"ﾀ\",17=>\"ﾁ\",18=>\"ﾂ\",19=>\"ﾃ\",20=>\"ﾄ\",\r\n         \r\n        21=>\"ﾅ\",22=>\"ﾆ\",23=>\"ﾇ\",24=>\"ﾈ\",25=>\"ﾉ\",\r\n         \r\n        26=>\"ﾊ\",27=>\"ﾋ\",28=>\"ﾌ\",29=>\"ﾍ\",30=>\"ﾎ\",\r\n         \r\n        31=>\"ﾏ\",32=>\"ﾐ\",33=>\"ﾑ\",34=>\"ﾒ\",35=>\"ﾓ\",\r\n         \r\n        36=>\"ﾔ\",37=>\"ﾕ\",38=>\"ﾖ\",\r\n         \r\n        39=>\"ﾗ\",40=>\"ﾘ\",41=>\"ﾙ\",42=>\"ﾚ\",43=>\"ﾛ\",\r\n         \r\n        44=>\"ﾜ\",45=>\"ｦ\",46=>\"ﾝ\",\r\n     \r\n        47=>\"ｧ\",48=>\"ｨ\",49=>\"ｩ\",50=>\"ｪ\",51=>\"ｫ\",\r\n         \r\n        52=>\"ｬ\",53=>\"ｭ\",54=>\"ｮ\",55=>\"ｯ\",56=>\"､\",\r\n         \r\n        57=>\"｡\",58=>\"ｰ\",59=>\"ﾞ\",60=>\"ﾟ\"\r\n        );\r\n         \r\n         $check_result   = array_search($katakana,$katakana_array);\r\n          \r\n         return $check_result;\r\n         \r\n    }', '2019-07-10 19:01:40', '0', '5', '435');
INSERT INTO `post` VALUES ('27', '3', '1', 'JavaScript', '<script type=\"text/javascript\" src=\"Scripts/jquery-1.6.2.js\"></script>\r\n \r\n<script language=\"javascript\" type=\"text/javascript\">\r\n \r\n    $(function(){\r\n \r\n        $(\'#dataInput\').bind(\'keypress\',function(event){\r\n \r\n            if(event.keyCode == \"13\")    \r\n \r\n            {\r\n \r\n                alert(\'你输入的内容为：\' + $(\'#dataInput\').val());\r\n \r\n            }\r\n \r\n        });//方法二如下\r\n         $(document).keydown(function(e) {\r\n    		if (e.keyCode == 13) {\r\n      			//dologin();\r\n    		}\r\n  	});\r\n    });', '2019-07-10 19:01:44', '0', '5', '45432');
INSERT INTO `post` VALUES ('28', '3', '1', 'Go', 'Go语言起源\nGo 语言起源 2007 年，并于 2009 年正式对外发布。它从 2009 年 9 月 21 日开始作为谷歌公司 20% 兼职项目，即相关员工利用 20% 的空余时间来参与 Go 语言的研发工作。该项目的三位领导者均是著名的计算机工程师：Robert Griesemer，参与开发 Java HotSpot 虚拟机；Rob Pike，Go 语言项目总负责人，贝尔实验室 Unix 团队成员，参与的项目包括 Plan 9，Inferno 操作系统和 Limbo 编程语言；Ken Thompson，贝尔实验室 Unix 团队成员，C 语言、Unix 和 Plan 9 的创始人之一，与 Rob Pike 共同开发了 UTF-8 字符集规范。2009 年 11 月 10 日，开发团队将 Go 语言项目以 BSD-style 授权（完全开源）正式公布了 Linux 和 Mac OS X 平台上的版本。Hector Chu 于同年 11 月 22 日公布了 Windows 版本。\n作为一个开源项目，Go 语言借助开源社区的有生力量达到快速地发展，并吸引更多的开发者来使用并改善它。\n\nGo语言的特性\nGo 语言将静态语言的安全性和高效性与动态语言的易开发性进行有机结合，达到完美平衡，从而使编程变得更加有乐趣，而不是在艰难抉择中痛苦前行。因此，Go 语言是一门类型安全和内存安全的编程语言。虽然 Go 语言中仍有指针的存在，但并不允许进行指针运算。\n\nGo 语言对网络通信、并发和并行编程有着极佳的支持，这能更好地利用大量的多核计算机。设计者通过 goroutine 这种轻量级线程的概念来实现这个目标，然后通过 channel 来实现各个 goroutine 之间的通信。这个特性是 Go 语言最强有力的部分，不仅支持了日益重要的多核与多处理器计算机，也弥补了现存编程语言在这方面所存在的不足。\n\nGo 语言中另一个非常重要的特性就是它的构建速度（编译和链接到机器代码的速度），一般情况下构建一个程序的时间只需要数百毫秒到几秒。这不仅极大地提升了开发者的生产力，同时也使得软件开发过程中的代码测试环节更加紧凑，而不必浪费大量的时间在等待程序的构建上。\n\n由于内存问题（通常称为内存泄漏）长期以来一直伴随着 C++ 的开发者们，Go 语言的设计者们认为内存管理不应该是开发人员所需要考虑的问题。因此尽管 Go 语言像其它静态语言一样执行本地代码，但它依旧运行在某种意义上的虚拟机，以此来实现高效快速的垃圾回收。\n\n有许多活跃的开源项目都是基于Go语言进行开发，目前十分流行的Docker也是基于Go语言进行开发。', '2019-07-10 19:01:48', '0', '5', '453');
INSERT INTO `post` VALUES ('29', '3', '1', 'Objective-C', '内存管理\r\n自己生成的对象，自己所持有 (alloc/new/copy/mutableCopy)\r\n非自己生成的对象，自己也能持有, 如retain方法\r\n不再需要自己持有的对象时释放, 使用release方法\r\n无法释放非自己持有的对象\r\nautorelease的具体使用方法 \r\n1. 生成并持有NSAutoreleasePool对象 \r\n2. 调用已分配对象的autorelease实例方法 \r\n3. 废弃NSAutoreleasePool对象\r\n\r\nARC有效时，id类型和对象类型必须加上所有权修饰符，一共有四种：\r\n\r\n__strong\r\n__weak\r\n__unsafe_unretained\r\n__autoreleasing\r\n使用__weak来避免循环引用，__weak不能持有对象实例，另外在持有某对象的弱引用时，若该对象被废弃，则此弱引用将自动失效且处于nil被赋值的状态(空弱引用)\r\n\r\n__unsafe_unretained是不安全的所有权修饰符，尽管ARC式的内存管理编译器的工作，但附有 __unsafe_unretained修饰符的变量不属于编译器的内存管理对象，与__weak一样，也无法持有对象\r\n\r\n在ARC有效的情况下，必须遵守一定的规则 \r\n1. 不能使用retain/release/retainCount/autorelease \r\n2. 不能使用NSAllocateObject/NSDeallocateObject \r\n3. 须遵守内存管理的方法命名规则 \r\n4. 不要显式调用dealloc，不能使用[super dealloc] \r\n5. 使用@autoreleasepool 块代替NSAutoreleasePool \r\n6. 不能使用区域(NSZone) \r\n7. 不对象型变量不能作为C结构的成员，除非加__unsafe_unretained \r\n8. 显式转换”id”和”void*”, 使用__bridge, __bridge_transfer, __bridge_retained\r\n\r\n使用__weak\r\n\r\n若附有__weak修饰符的变量所引用的对象被废弃，则将nil赋值给该变量\r\n使用附有__weak修饰符的变量，即是使用注册到autoreleasepool中的对象\r\nid __weak obj1 = obj; 将被分解成以下代码 （模拟代码）\r\n\r\nid obj1 = 0; objc_storeWeak(&obj1, obj); objc_storeWeak(&obj1, 0);\r\nobjc_storeWeak函数把第二个参数赋值对象的地址作为键值，将第一参数的附有__weak修饰符的变量的地址注册到weak表中（哈希表)，如果第二参数为， 则把变量的地址从weak表中删除。由于一个对象可同时赋值给多个附有__weak修饰符的变量中，所以对于一个键，可注册多个变量的地址。\r\n\r\n对象的释放过程：\r\n\r\nobjc_release\r\n引用计数为0, 执行dealloc\r\n_objc_rootDealloc\r\nobject_dispose\r\nobjc_destructInstance\r\nobjc_clear_deallocating\r\nobjc_clear_deallocating执行动作:\r\n\r\n从weak表中获取废弃对象的地直为键的记录\r\n将包含在记录中的所有附有__weak修饰符变是的地址，赋为nil\r\n从weak表中删除该记录\r\n从引用计数表中删除废弃对象的地址为键的记录\r\n如果有大量使用附有__weak修饰符的变量，则会消耗相应的CPU资源，良策是只在需要避免循环引用的时候使用__weak，可先将__weak修饰的变量赋值给__strong修饰的变量\r\n独自实现引用计数的类无法使用__weak，如NSMachPort，另外当allowsWeakReference/retainWeakReference方法返回No的时候也无法使用', '2019-07-10 19:01:51', '0', '5', '43456');

-- ----------------------------
-- Table structure for sub_forum
-- ----------------------------
DROP TABLE IF EXISTS `sub_forum`;
CREATE TABLE `sub_forum` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `main_forum_id` int(11) DEFAULT NULL,
  `title` varchar(20) DEFAULT NULL,
  `info` varchar(60) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `main_forum` (`main_forum_id`)
) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of sub_forum
-- ----------------------------
INSERT INTO `sub_forum` VALUES ('1', '1', '数据库', '数据库入门到精通');
INSERT INTO `sub_forum` VALUES ('2', '1', '编程语言', '编程语言从入门到精通');
INSERT INTO `sub_forum` VALUES ('3', '1', '操作系统', '操作系统入门');

-- ----------------------------
-- Table structure for sys_menu
-- ----------------------------
DROP TABLE IF EXISTS `sys_menu`;
CREATE TABLE `sys_menu` (
  `menu_id` int(11) NOT NULL AUTO_INCREMENT COMMENT '权限的id',
  `menu_name` varchar(255) DEFAULT NULL COMMENT '权限的名称（资源的名称）',
  `menu_url` varchar(255) DEFAULT NULL COMMENT '网站资源的访问地址',
  `note` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`menu_id`)
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of sys_menu
-- ----------------------------
INSERT INTO `sys_menu` VALUES ('1', '系统管理', '/*.action', '增加角色，权限，系统管理员的管理');
INSERT INTO `sys_menu` VALUES ('2', '用户管理', 'user/listUser', '网站用户的管理');
INSERT INTO `sys_menu` VALUES ('3', '帖子管理', 'article/', null);
INSERT INTO `sys_menu` VALUES ('4', '版块管理', 'forum/*', null);
INSERT INTO `sys_menu` VALUES ('5', '评论管理', 'follow/', null);
INSERT INTO `sys_menu` VALUES ('6', '公告管理', 'notice/', null);

-- ----------------------------
-- Table structure for sys_menu_permission
-- ----------------------------
DROP TABLE IF EXISTS `sys_menu_permission`;
CREATE TABLE `sys_menu_permission` (
  `id` int(255) NOT NULL AUTO_INCREMENT,
  `sys_menu_id` int(11) DEFAULT NULL,
  `sys_permission_id` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8 COLLATE=utf8_bin;

-- ----------------------------
-- Records of sys_menu_permission
-- ----------------------------
INSERT INTO `sys_menu_permission` VALUES ('1', '3', '1');
INSERT INTO `sys_menu_permission` VALUES ('2', '3', '2');
INSERT INTO `sys_menu_permission` VALUES ('3', '3', '3');
INSERT INTO `sys_menu_permission` VALUES ('4', '3', '4');
INSERT INTO `sys_menu_permission` VALUES ('5', '3', '5');
INSERT INTO `sys_menu_permission` VALUES ('6', '5', '2');
INSERT INTO `sys_menu_permission` VALUES ('7', '5', '4');

-- ----------------------------
-- Table structure for sys_menu_role
-- ----------------------------
DROP TABLE IF EXISTS `sys_menu_role`;
CREATE TABLE `sys_menu_role` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `sys_role_id` int(255) DEFAULT NULL,
  `sys_menu_id` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8 COLLATE=utf8_bin;

-- ----------------------------
-- Records of sys_menu_role
-- ----------------------------
INSERT INTO `sys_menu_role` VALUES ('1', '3', '3');
INSERT INTO `sys_menu_role` VALUES ('3', '3', '5');

-- ----------------------------
-- Table structure for sys_permission
-- ----------------------------
DROP TABLE IF EXISTS `sys_permission`;
CREATE TABLE `sys_permission` (
  `permission_id` int(11) NOT NULL AUTO_INCREMENT,
  `operation` varchar(255) COLLATE utf8_bin DEFAULT NULL,
  `note` varchar(255) COLLATE utf8_bin DEFAULT NULL,
  PRIMARY KEY (`permission_id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8 COLLATE=utf8_bin;

-- ----------------------------
-- Records of sys_permission
-- ----------------------------
INSERT INTO `sys_permission` VALUES ('1', 'add', '增');
INSERT INTO `sys_permission` VALUES ('2', 'delete', '删');
INSERT INTO `sys_permission` VALUES ('3', 'update', '改');
INSERT INTO `sys_permission` VALUES ('4', 'query', '查');
INSERT INTO `sys_permission` VALUES ('5', 'check', '审核');

-- ----------------------------
-- Table structure for sys_role
-- ----------------------------
DROP TABLE IF EXISTS `sys_role`;
CREATE TABLE `sys_role` (
  `role_id` int(11) NOT NULL AUTO_INCREMENT,
  `role_name` varchar(255) DEFAULT NULL,
  `note` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`role_id`)
) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of sys_role
-- ----------------------------
INSERT INTO `sys_role` VALUES ('1', '系统管理员', '允许对系统的一切进行操作');
INSERT INTO `sys_role` VALUES ('2', '高级管理员', '版块，公告的增删改查，网站用户的查询和删除');
INSERT INTO `sys_role` VALUES ('3', '普通管理员', '对帖子和评论能查询和删除，对精华贴的审核');

-- ----------------------------
-- Table structure for sys_user
-- ----------------------------
DROP TABLE IF EXISTS `sys_user`;
CREATE TABLE `sys_user` (
  `user_id` int(11) NOT NULL AUTO_INCREMENT,
  `username` varchar(255) DEFAULT NULL,
  `password` varchar(255) DEFAULT NULL,
  `sys_role_id` int(255) DEFAULT NULL,
  `sex` char(1) DEFAULT NULL,
  `phone` int(255) DEFAULT NULL COMMENT '权限的等级',
  `email` varchar(255) DEFAULT NULL,
  `note` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`user_id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of sys_user
-- ----------------------------
INSERT INTO `sys_user` VALUES ('1', 'lmj', '123', '3', '男', '10', '123', '李茂均');
INSERT INTO `sys_user` VALUES ('2', 'qw', 'qw', '3', '女', '124324', '432432', 'wq');

-- ----------------------------
-- Table structure for user
-- ----------------------------
DROP TABLE IF EXISTS `user`;
CREATE TABLE `user` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `username` varchar(20) DEFAULT NULL,
  `password` varchar(20) DEFAULT NULL,
  `sex` varchar(5) DEFAULT NULL,
  `photo_url` tinytext,
  `email` varchar(30) DEFAULT NULL,
  `type` int(11) DEFAULT NULL,
  `register_date` datetime DEFAULT NULL,
  `signature` varchar(50) DEFAULT NULL,
  `level` int(11) DEFAULT '0',
  `active_code` varchar(32) DEFAULT NULL,
  `hasActive` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of user
-- ----------------------------
INSERT INTO `user` VALUES ('1', 'lmj', '123', '男', '/static/bbs/upload/headimg/0da13c29-88d6-4c32-939b-711199518e3d.jpg', '15718522826', null, null, '好帅', null, null, null);
INSERT INTO `user` VALUES ('2', 'hjw', '123', '男', '/static/bbs/upload/headimg/702b8819-c250-41db-87f0-6c8557ef306f.jpg', '13821491437', '1', '2019-07-11 15:10:26', '美丽', '0', '', '1');
INSERT INTO `user` VALUES ('3', 'fcl', '123', '男', 'static/bbs/upload/headimg/4699abf5-ecff-49c6-85cc-281021f7bbbd.jpg', '13142312321', '1', '2019-07-11 15:11:35', '大方', '0', null, '1');
